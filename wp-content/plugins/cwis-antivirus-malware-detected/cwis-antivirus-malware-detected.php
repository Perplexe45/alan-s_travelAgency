<?php

/**
 * The main plugin file
 *
 * This file is read by WordPress to generate the plugin information in the plugin
 * admin area. This file also includes all of the dependencies used by the plugin.
 *
 * @link              https://cobweb-security.com
 * @since             1.0.0
 * @package           Cwis
 * @copyright         2016-2018 CobWeb Security Ltd.
 * @license           https://www.gnu.org/licenses/gpl-2.0.txt GPL2 
 * @link              https://wordpress.org/plugins/cwis-antivirus-malware-detected/
 *
 * @wordpress-plugin
 * Plugin Name:       WebDefender Security
 * Plugin URI:        https://cobweb-security.com/pages/free-website-antivirus/
 * Description:       PRO Security – Antivirus Scanner, 2-Layer Protection Hide & GDPR, Brute Force & Anti-SPAM, Login Security and Security Hardening.
 * Version:           4.3.5.1
 * Author:            CobWeb Security Ltd.
 * Author URI:        https://cobweb-security.com
 * Text Domain:       cwis-antivirus-malware-detected
 * Domain Path:       /languages
 */
define('CWIS_MAIN_FILE_PATH', __FILE__);
define('CWIS_PLUGIN_DIR_PATH', plugin_dir_path(__FILE__));
define('CWIS_PLUGIN_SLUG', 'cwis-antivirus-malware-detected');
define('CWIS_PLUGIN_VERSION', '4.3.5.1');

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Hack for old php versions to use boolval()
if (!function_exists('boolval')) {

    function boolval($val)
    {
        return (bool) $val;
    }

}

// Checks if Multisite is enabled.
if (!function_exists('is_multisite')) {

    function is_multisite()
    {
        if (defined('MULTISITE')) {
            return MULTISITE;
        }

        if (defined('SUBDOMAIN_INSTALL') || defined('VHOST') || defined('SUNRISE')) {
            return true;
        }

        return false;
    }

}

// Writes a string to a file (PHP 4+).
if (!function_exists('file_put_contents')) {
    defined('FILE_APPEND') OR define('FILE_APPEND', 8);
    defined('FILE_USE_INCLUDE_PATH') OR define('FILE_USE_INCLUDE_PATH', 1);
    defined('LOCK_SH') OR define('LOCK_SH', 1);
    defined('LOCK_EX') OR define('LOCK_EX', 2);
    defined('LOCK_UN') OR define('LOCK_UN', 3);
    defined('LOCK_NB') OR define('LOCK_NB', 4);

    function file_put_contents($filename, $data, $flag = false)
    {
        // Convert array to string
        if (is_array($data)) {
            $data = implode($data);
        }

        // Exit if is not a string
        if (!is_scalar($data)) {
            user_error('file_put_contents() The 2nd parameter should be either a string or an array', E_USER_WARNING);
            return false;
        }

        // Get the length of data to write
        $data_length = strlen($data);

        // Check what mode we are using
        $mode = ($flag & FILE_APPEND) ? 'ab+' : 'wb+';

        // Check if we're using the include path
        $use_inc_path = ($flag & FILE_USE_INCLUDE_PATH) ? true : false;

        // Open the file for writing
        if (false === ($fp = @fopen($filename, $mode, $use_inc_path))) {
            user_error('file_put_contents() failed to open stream: Permission denied', E_USER_WARNING);
            return false;
        }

        // Lock the file
        $operation = $flag & (LOCK_EX | LOCK_SH);
        $locked = $operation ? flock($fp, $operation) : false;

        // Write the data
        $bytes_written = fwrite($fp, $data);

        // Release the lock
        if ($locked) {
            flock($fp, LOCK_UN);
        }

        // Close the handle
        fclose($fp);

        // Check all the data was written
        if ($bytes_written !== $data_length) {
            $errormsg = sprintf('file_put_contents() Only %d of %d bytes written, possibly out of free disk space.',
                                $bytes_written, $data_length);
            user_error($errormsg, E_USER_WARNING);
            return false;
        }

        // Return length
        return $bytes_written;
    }

}

// Loading a Text Domain
function cwis_load_plugin_textdomain()
{
    $plugin_rel_path = basename(dirname(__FILE__)) . '/languages';
    load_plugin_textdomain(CWIS_PLUGIN_SLUG, FALSE, $plugin_rel_path);
}

add_action('plugins_loaded', 'cwis_load_plugin_textdomain');

// Include plugin bootstrap file(s).
require CWIS_PLUGIN_DIR_PATH . 'cwis-bootstrap.php';
require CWIS_PLUGIN_DIR_PATH . 'cwsd-bootstrap.php';
