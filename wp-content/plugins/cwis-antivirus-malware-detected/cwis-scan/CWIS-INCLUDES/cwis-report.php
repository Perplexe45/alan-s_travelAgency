<?php
// ezscan7objrldgpfvmqkdthyuwi4x2x5
if (!defined('CWIS_SIGNATURE')) {
	header('HTTP/1.0 403 Forbidden');
	die('-1');
}

class CwisReportBuilder
{

	var $utilities;
	//
	var $report_context, $report_count, $report_label, $report_message, $report_name, $report_result_entries;
	var $show_offer = false;
	//
	var $entry_details_replacements = array(
		'...'		 => '&hellip;',
		'~'			 => '&middot;',
		'[_MARKER_]' => '<code class="marker btn btn-danger" title="Marker">&nbsp;</code>',
		'[_BEGIN_]'	 => '<span class="line_no label label-success">',
		'[_END_]'	 => '</span> ',
	);
	//
	var $ignore_list = array();
	//
	// Supported report types
	var $report_types = array(
		// Vulnerabilities
		'vuln'	 => array(
			'VulnerCMS'	 => array(
				'label'		 => 'VULNERABLE CMS',
				'name'		 => _CWIS_RESULT_VULNERABLE_CMS, // Vulnerable CMS
				'message'	 => _CWIS_VULNERABLE_CMS_DETECTED // Outdated content management system (CMS) potentially vulnerable to attack.
			),
			'Vulnerable' => array(
				'label'		 => 'VULNERABLE SCRIPTS',
				'name'		 => _CWIS_RESULT_VULNERABLE_SCRIPTS, // Vulnerable scripts and plugins
				'message'	 => _CWIS_VULNERABLE_SCRIPTS_DETECTED // Scripts possibly vulnerable to cross-site scripting (XSS), SQL injections or other potential exploits.
			),
		),
		// Critical reports
		'crit'	 => array(
			'CriticalJS'	 => array(
				'label'		 => 'CLIENT/JS MALWARE',
				'name'		 => _CWIS_RESULT_JS_VIRUSES, // Javascript malware/virus
				'message'	 => _CWIS_JS_VIRUS_SIGNATURES_DETECTED // Javascript virus signatures detected.
			),
			'CriticalPHP'	 => array(
				'label'		 => 'SERVER/PHP MALWARE',
				'name'		 => _CWIS_RESULT_SERVER_MALWARE, // Server malware
				'message'	 => _CWIS_SERVER_MALWARE_SIGNATURES_DETECTED // Shell script signatures detected. Might be a malicious or hacker's scripts.
			),
			'Htaccess'		 => array(
				'label'		 => 'HTACCESS',
				'name'		 => _CWIS_RESULT_HTACCESS_REDIRECTS, // Malicious code in .htaccess
				'message'	 => _CWIS_MALICIOUS_HTACCESS_DETECTED // Malicious .htaccess (redirect to external server, extension handler replacement or malicious code auto-append).
			),
			'Phishing'		 => array(
				'label'		 => 'PHISHING',
				'name'		 => _CWIS_RESULT_PHISHING_PAGES, // Phishing pages
				'message'	 => _CWIS_PHISHING_PAGES_DETECTED // Phishing pages detected.
			),
			'WebShells'		 => array(
				'label'		 => 'WEBSHELLS',
				'name'		 => _CWIS_RESULT_BACKDOOR_WEB_SHELLS, // Web shell scripts
				'message'	 => _CWIS_WEB_SHELL_SIGNATURES_DETECTED // Shell script signatures detected.
			),
		),
		// Info reports
		'info'	 => array(
			'BigFiles'		 => array(
				'label'		 => 'BIG FILES / SKIPPED',
				'name'		 => _CWIS_RESULT_SKIPPED_BIG_FILES, // Large files
				'message'	 => _CWIS_LARGE_FILES_SKIPPED // Large files skipped (greater than 1Mb by default).
			),
			'GitFiles'		 => array(
				'label'		 => 'GIT FILES / SKIPPED',
				'name'		 => _CWIS_RESULT_SKIPPED_GIT_FILES, // Git files
				'message'	 => _CWIS_GIT_FILES_SKIPPED // Git files skipped (content objects).
			),
			'HiddenFiles'	 => array(
				'label'		 => 'HIDDEN FILES',
				'name'		 => _CWIS_RESULT_HIDDEN_FILES, // Hidden Linux files
				'message'	 => _CWIS_HIDDEN_FILES_DETECTED // Hidden files (Unix dot-files).
			),
			'NotRead'		 => array(
				'label'		 => 'READ ERRORS / SKIPPED',
				'name'		 => _CWIS_RESULT_READING_ERRORS, // Read/scan errors
				'message'	 => _CWIS_READING_ERROR_SKIPPED // Reading errors (skipped files).
			),
			'PrivateIP'		 => array(
				'label'		 => 'PRIVATE IP',
				'name'		 => _CWIS_RESULT_PRIVATE_IP_ADDRESSES, // Suspicious IP (private address or loopback)
				'message'	 => _CWIS_SUSPICIOUS_PRIVATE_IP // Suspicious private IP addresses detected.
			),
			'SkippedDirs'	 => array(
				'label'		 => 'IGNORED DIRS / SKIPPED',
				'name'		 => _CWIS_RESULT_SKIPPED_DIRECTORIES, // Skipped directories
				'message'	 => _CWIS_SKIPPED_DIRECTORIES // Excluded from scanning directories matched by ignore lists.
			),
			'SymLinks'		 => array(
				'label'		 => 'SYMLINKS',
				'name'		 => _CWIS_RESULT_SYMLINKS, // Symbolic links
				'message'	 => _CWIS_SYMBOLIC_LINKS // Symbolic links (soft links).
			),
			'Whitelisted'	 => array(
				'label'		 => 'WHITELISTED',
				'name'		 => _CWIS_RESULT_WHITELISTED_FILES, // Whitelisted files (matched by SHA1 hash)
				'message'	 => _CWIS_WHITELISTED_FILES // Excluded from scanning results, as were found in file whitelists.
			),
		),
		// Warning reports
		'warn'	 => array(
			'AdwareList' => array(
				'label'		 => 'ADWARE LINKS',
				'name'		 => _CWIS_RESULT_ADWARE_AND_SPAM_LINKS, // Adware and spam links
				'message'	 => _CWIS_ADWARE_LINKS_OR_LINKFARM // This script has black-SEO links or linkfarm. Check if it was installed by yourself.
			),
			'Doorways'	 => array(
				'label'		 => 'DOORWAYS',
				'name'		 => _CWIS_RESULT_DOORWAYS, // Might be the doorway pages
				'message'	 => _CWIS_MIGHT_BE_DOORWAY_PAGES // Directories contained too many .php or .html files. Files might be a part of doorway pages.
			),
			'EmptyLinks' => array(
				'label'		 => 'SEO LINKS',
				'name'		 => _CWIS_RESULT_EMPTY_LINKS, // Empty links (with no anchor text)
				'message'	 => _CWIS_INVISIBLE_LINKS_DETECTED // These files have invisible links, might be black-SEO stuff.
			),
		),
		// Suspicious (PRO)
		'susp'	 => array(
			'Heuristic'		 => array(
				'label'		 => 'HEURISTICS', // Heuristic analyzer (suspicious files)
				'name'		 => _CWIS_RESULT_SUSPICIOUS_HEURISTICS, // Heuristic analyzer (suspicious files)
				'message'	 => _CWIS_SUSPICIOUS_HEURISTICS_DETECTED // Heuristic Analyzer has detected suspicious files. Check if they are malware.
			),
			'Iframer'		 => array(
				'label'		 => 'IFRAMES',
				'name'		 => _CWIS_RESULT_IFRAME_INJECTIONS, // iFrame injection attack
				'message'	 => _CWIS_IFRAME_INJECTIONS_DETECTED // Might be a malicious or hacker's script.
			),
			'MaliciousCode'	 => array(
				'label'		 => 'SUSPICIOUS',
				'name'		 => _CWIS_RESULT_POTENTIALLY_MALICIOUS, // Potentially malicious (if scan_level >= 3)
				'message'	 => _CWIS_POTENTIALLY_MALICIOUS_CODE // Suspicious code detected. It's usually used in malicious scrips.
			),
			'PHPCodeInside'	 => array(
				'label'		 => 'SUSP PHP CODE',
				'name'		 => _CWIS_RESULT_PHP_CODE_INSIDE, // PHP code inside non-PHP files
				'message'	 => _CWIS_PHP_CODE_INSIDE_NON_PHP_FILE // Non-PHP file has PHP signature. Check for malicious code
			),
			'UnixExec'		 => array(
				'label'		 => 'UNIX EXECS',
				'name'		 => _CWIS_RESULT_UNIX_EXECUTABLES, // Unix executables signatures and odd scripts
				'message'	 => _CWIS_UNIX_EXECUTABLES_DETECTED // Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits.
			),
			'VulnerCode'	 => array(
				'label'		 => 'VULNERABLE CODE',
				'name'		 => _CWIS_RESULT_POTENTIALLY_VULNERABLE, // PHP code potentially vulnerable
				'message'	 => _CWIS_POTENTIALLY_VULNERABLE_DETECTED // PHP code potentially vulnerable to cross-site scripting (XSS), SQL injection, HTTP header injection and other potential exploits.
			),
		)
	);

	/**
	 * Use this method as a class constructor.
	 */
	function construct($results = array())
	{
		// Instantiate utilities and pass results object
		$this->utilities = new CwisUtilities();
		$this->results = $results;
	}

	////////////////////
	// --- HELPERS ---//
	////////////////////

	/**
	 * Gets scan result context by report.
	 * @param string $type
	 * @return string
	 */
	function getScanResultBackground($type = 'info')
	{
		// Validate result type and define context
		switch ($type) {
			case 'info':
				$color = '40a0c0';
				break;

			case 'success':
				$color = '60a000';

			case 'warn':
			case 'susp':
			case 'warning':
				$color = 'c0a020';
				break;

			case 'vuln':
			case 'crit':
			case 'danger':
				$color = 'c04020';
				break;

			case 'primary':
			default:
				$color = '20a080';
		}

		return $color;
	}

	/**
	 * Gets scan result by report var name.
	 * @param string $var_name
	 * @return string
	 */
	function getScanResultByVar($var_name = null)
	{
		if (!is_string($var_name) || !strlen($var_name) || !isset($this->results) ||
				!array_key_exists($var_name, $this->results)) {
			return array();
		}

		return $this->results[$var_name];
	}

	/**
	 * Gets scan result context by report.
	 * @param string $type
	 * @return string
	 */
	function getScanResultContext($type = 'info')
	{
		// Validate result type and define context
		switch ($type) {
			case 'vuln':
			case 'crit':
				$context = 'danger';
				break;

			case 'info':
				$context = 'info';
				break;

			case 'warn':
			case 'susp':
				$context = 'warning';
				break;

			default:
				$context = 'default';
		}

		return $context;
	}

	/**
	 * Returns scan results as a standardized object, accepts an optional
	 * parameters allowing overriding of entry data.
	 * @param string $var_name
	 * @param null|array $entry_details
	 * @return type
	 */
	function getScanResultEntriesObject($var_name = '', $entry_details = null)
	{
		// Process string names only
		if (!is_string($var_name) || !isset($this->results[$var_name])) {
			$response = new CwisResponse();
			$response->jsonError('Undefined result name "' . $var_name . '".');
		}

		// Array of scan results
		$scan_results_list = $this->getScanResultByVar($var_name);

		if (!is_array($entry_details)) {
			$entry_details = array();
		}

		// Reset results array
		$this->report_result_entries = array();

		// Build object body
		foreach ($scan_results_list as $i => $entry) {
			$entry_index = $entry_name = $entry_fragment = $entry_sig_id = null;
			$entry_size = $entry_ctime = $entry_mtime = $entry_crc = null;

			// Array format support
			if (is_array($entry)) {
				$entry_index = isset($entry['file']) ? $entry['file'] : null; // deprecated, use 'id' instead
				$entry_name = isset($entry['name']) ? $this->utilities->filenameExpand($entry['name']) : null;

				// Optional override of entry details
				if (isset($entry_details[$i])) {
					$entry_fragment = $entry_details[$i];
				} else {
					$entry_fragment = isset($entry['fragment']) ? $entry['fragment'] : null;
				}

				// Optional signature IDs (hashes)
				$entry_sig_id = isset($entry['sig']) ? $entry['sig'] : null;

				// Get and unpack file stat
				$entry_stat_packed = isset($entry['stat']) ? $entry['stat'] : null;
				if (strlen($entry_stat_packed) === 12) {
					$entry_stat_unpacked = unpack('I1entry_size/I1entry_ctime/I1entry_mtime', $entry_stat_packed);
					extract($entry_stat_unpacked); // comply PHP 5.2 strict standards
				}

				// Get entry CRC
				$entry_crc = isset($entry['crc']) ? $entry['crc'] : null;
			} else {
				// Get file index (deprecated)
				$entry_index = $entry;
			}
			unset($entry);

			// Validate and unpack entry data (DEPRECATED)
			if (is_int($entry_index)) {
				if (isset($this->results['EntryDetails'][$entry_index])) {
					$entry_details = $this->results['EntryDetails'][$entry_index];
					$entry_separator_pos = strpos($entry_details, "\t");
					if (false === $entry_separator_pos) {
						$entry_name_packed = $entry_details;
					} else {
						$entry_name_packed = substr($entry_details, 0, $entry_separator_pos);
						$entry_details_packed = substr($entry_details, $entry_separator_pos + 1);

						// Unpack file details
						if (strlen($entry_details_packed) === 12) {
							$entry_details_unpacked = unpack('I1entry_size/I1entry_ctime/I1entry_mtime', $entry_details_packed);
							extract($entry_details_unpacked); // PHP 5.2 strict standards
						}
					}

					// Unpack filename or PDO entry
					$entry_name = $this->utilities->filenameExpand($entry_name_packed);
				}

				// Get entry CRC
				$entry_crc = isset($this->results['EntryCRC'][$entry_index]) ? $this->results['EntryCRC'][$entry_index] : null;
			}

			// Ignore this filename (duplicated entry)?
			if (null !== $entry_name && $this->needIgnore($entry_name, $entry_crc)) {
				continue;
			}

			// Process file details (code preview)
			if ($entry_fragment && is_string($entry_fragment)) {

				// Prepare a "line/row number" prefix
				$line_no_prefix = (false !== strpos($entry_name, ' ')) ? 'Row ' : 'Line ';
				$html_entry_details = str_replace('[_BEGIN_]', '[_BEGIN_]' . $line_no_prefix, $entry_fragment);

				// File details replacements
				foreach ($this->entry_details_replacements as $search => $replace) {
					$html_entry_details = str_replace($search, $replace, $html_entry_details);
				}

				// Output only valid byte sequences filtered by utf8_sanitize
				$entry_details_content = utf8_sanitize($html_entry_details);
			} else {
				$entry_details_content = '';
			}

			// Add a new result
			$this->report_result_entries[] = array(
				'id'		 => (int) $entry_index, // entry index (PDO row number)
				'name'		 => $entry_name, // entry name (PDO record or file)
				'content'	 => $entry_details_content, // sanitized entry details (code fragment)
				'changed'	 => (int) $entry_ctime, // entry changed (timestamp)
				'modified'	 => (int) $entry_mtime, // entry modified (timestamp)
				'size'		 => (int) $entry_size, // entry size (in bytes)
				'sig'		 => (int) $entry_sig_id, // entry sig id (CRC32)
			);
		}

		return $this->report_result_entries;
	}

	function needIgnore($file_name = '', $file_crc = '')
	{
		for ($i = 0; $i < count($this->ignore_list); $i++) {
			if (strpos($file_name, $this->ignore_list[$i][0]) !== false) {
				if ($file_crc == $this->ignore_list[$i][1]) {
					return true;
				}
			}
		}

		return false;
	}

	///////////////////
	// --- PUBLIC ---//
	///////////////////

	/**
	 * Initialize new report's properties.
	 * @param string $var_name
	 */
	function process($var_name = '')
	{
		$report_data = array();
		foreach ($this->report_types as $threat_type => $report_vars) {
			if (isset($report_vars[$var_name])) {
				$report_data = $report_vars[$var_name];
				$report_data['type'] = $threat_type;
				break;
			}
		}

		// Set report params
		$this->report_var_name = $var_name;
		$this->report_count = count($this->getScanResultByVar($var_name));
		$this->report_name = $report_data['name'];
		$this->report_label = $report_data['label'];

		// Set default values
		$this->report_context = 'success';
		$this->report_message = _CWIS_NO_DATA_AVAILABLE;
		$this->report_result_entries = array();

		// On threats detected
		if ($this->report_count > 0) {
			$this->report_context = $this->getScanResultContext($report_data['type']);

			switch ($var_name) {
				case 'BigFiles':
					// Max size to scan (default is 1MiB)
					$max_size_to_scan = MAX_SIZE_TO_SCAN > 0 ? MAX_SIZE_TO_SCAN : 1048576;

					// Large files skipped (greater than %s)
					$this->report_message = sprintf($report_data['message'], $this->utilities->formatBytes($max_size_to_scan));
					$this->getScanResultEntriesObject($var_name);
					break;

				case 'Heuristic':
					// Heuristic descriptions
					$heuristicDescriptions = array();
					foreach ($this->results['Heuristic'] as $i => $array) {
						$type = isset($array['fragment']) ? $array['fragment'] : '-';
						switch ($type) {
							case CWIS_SUSP_FILE_MTIME:
								$description = _CWIS_SUSP_FILE_MTIME;
								break;

							case CWIS_SUSP_FILE_PERM:
								$description = _CWIS_SUSP_FILE_PERM;
								break;

							case CWIS_SUSP_PHP_IN_UPLOAD:
								$description = _CWIS_SUSP_PHP_IN_UPLOAD;
								break;

							default:
								$description = $type;
						}
						$heuristicDescriptions[$i] = $description;
					}

					// Heuristic Analyzer has detected suspicious files. Check if they are malware.
					$this->report_message = $report_data['message'];
					$this->getScanResultEntriesObject($var_name, $heuristicDescriptions);
					break;

				case 'EmptyLinks':
					// Process empty link sources
					$emptyLinkDetails = array();
					foreach ($this->results['EmptyLinks'] as $i => $array) {
						$sources = isset($array['fragment']) ? $array['fragment'] : array();
						$details = htmlspecialchars(implode(', ', $sources));
						if (count($sources) >= CWIS_MAX_EXTERNAL_LINKS) {
							$details .= '... (' . _CWIS_DISPLAYED_FIRST . CWIS_MAX_EXTERNAL_LINKS . ')';
						}

						$emptyLinkDetails[$i] = _CWIS_INVISIBLE_LINKS_LIST . ': ' . $details;
					}

					// These files have invisible links, might be black-SEO stuff.
					$this->report_message = $report_data['message'];
					$this->getScanResultEntriesObject($var_name, $emptyLinkDetails);
					break;

				case 'Doorways':
					if ((CWIS_RMASK_FULL & CWIS_RMASK_DOORWAYS) === CWIS_RMASK_DOORWAYS) {
						// Directories contained too many .php or .html files. Files might be a part of doorway pages.
						$this->report_message = $report_data['message'];
						$this->getScanResultEntriesObject($var_name);
					} else {
						$this->report_context = 'success';
					}
					break;

				case 'MaliciousCode':
					if ((CWIS_RMASK_FULL & CWIS_RMASK_SUSP) === CWIS_RMASK_SUSP) {
						// Suspicious code detected. It's usually used in malicious scrips.
						$this->report_message = $report_data['message'];
						$this->getScanResultEntriesObject($var_name);
					} else {
						$this->report_context = 'success';
					}
					break;

				case 'PHPCodeInside':
					if ((CWIS_RMASK_FULL & CWIS_RMASK_PHPSIGN) == CWIS_RMASK_PHPSIGN) {
						// Non-PHP file has PHP signature. Check for malicious code
						$this->report_message = $report_data['message'];
						$this->getScanResultEntriesObject($var_name);
					} else {
						$this->report_context = 'success';
					}
					break;

				default:
					$this->report_message = $report_data['message'];
					$this->getScanResultEntriesObject($var_name);
			}

			// Display a company's services offer?
			if ($this->report_context === 'danger' || $var_name === 'Iframer' || $var_name === 'NotRead') {
				$this->show_offer = true;
			}
		}

		return $this->report_result_entries;
	}

}

class CwisReporter
{

	// Config and queue
	var $config, $queue;
	//
	// Classes instances
	var $builder, $logger, $translations, $utilities;
	//
	var $report_context, $report_count, $report_message, $report_name, $report_label;
	var $report_json, $report_table, $report_text;
	var $show_offer = false;
	//
	var $ignore_list = array();
	var $cleanup_memory = false;

	/**
	 * Use this method as a class constructor.
	 */
	function construct($config = null, $queue = null, $results = array())
	{
		// Instantiate the core classes
		$this->logger = new CwisLogger();
		$this->translations = new CwisTranslations();
		$this->utilities = new CwisUtilities();

		// Pass configuration options
		if (gettype($config) === 'object') {
			$this->config = $config;
			$this->logger->setScanPath($this->config->getScanPath());
		}

		// Pass a scan queue object
		if (gettype($queue) === 'object') {
			$this->queue = $queue;
		}

		// Copy of results object
		$this->results = $results;

		// Instantiate the report builder class
		$this->builder = new CwisReportBuilder();
		$this->builder->construct($results);
	}

	/////////////////////////
	// --- BUILD REPORT ---//
	/////////////////////////

	function processNow($var_name = '')
	{
		// Get array of scan results (report list)
		$this->report_result_entries = $this->builder->process($var_name);

		// Clean up memory
		if ($this->cleanup_memory) {
			unset($this->results);
		}

		// Get report params
		$this->report_context = $this->builder->report_context;
		$this->report_count = $this->builder->report_count;
		$this->report_label = $this->builder->report_label;
		$this->report_message = $this->builder->report_message;
		$this->report_name = $this->builder->report_name;

		// Print results as a JSON string
		$this->report_json = $this->printListJsonString();

		// Print results list as an HTML table
		$this->report_table = $this->printListHtmlTable($var_name);
		//
		// Print results as plain text lists
		$this->report_text = $this->printListPlainText();
	}

	/////////////////////
	// --- PHP INFO ---//
	/////////////////////

	/**
	 * PHP info and ini-values.
	 */
	function processPHPInfo($report_format = 'html')
	{
		// Get server info
		$this->processSysInfo($report_format);

		// Generate textual report
		$this->report_text = strip_tags($this->report_table);
	}

	/**
	 * System/PHP info and ini-values.
	 */
	function processSysInfo($report_format = 'html')
	{
		// Get server info
		$serverEnvInfo = new cwisServerEnvInfo();
		$serverEnvInfo->construct($this->config);
		$serverEnvInfo->parseResultInfo($report_format);

		// CMS detected
		if (isset($this->results['DetectedCMS']) && count($this->results['DetectedCMS']) > 0) {
			$serverEnvInfo->insertResult('cms', $this->results['DetectedCMS']);
		}

		// Plugins detected
		if (isset($this->results['DetectedPlugins']) && count($this->results['DetectedPlugins']) > 0) {
			$serverEnvInfo->insertResult('plugins', $this->results['DetectedPlugins']);
		}

		// Clear vars and get the report
		$this->report_var_name = '';
		$this->report_context = '';
		$this->report_count = 0;
		$this->report_label = '';
		$this->report_message = '';
		$this->report_name = '';
		$this->report_table = $serverEnvInfo->printHtmlReport($report_format);
		$this->report_text = '';

		return $this->report_table;
	}

	////////////////////
	// --- HELPERS ---//
	////////////////////

	function needIgnore($file_name = '', $file_crc = '')
	{
		for ($i = 0; $i < count($this->ignore_list); $i++) {
			if (strpos($file_name, $this->ignore_list[$i][0]) !== false) {
				if ($file_crc == $this->ignore_list[$i][1]) {
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Gets scan result context by report.
	 * @param string $type
	 * @return string
	 */
	function getScanResultBackground($type = 'info')
	{
		// Validate result type and define context
		switch ($type) {
			case 'info':
				$color = '40a0c0';
				break;

			case 'success':
				$color = '60a000';

			case 'warn':
			case 'susp':
			case 'warning':
				$color = 'c0a020';
				break;

			case 'vuln':
			case 'crit':
			case 'danger':
				$color = 'c04020';
				break;

			case 'primary':
			default:
				$color = '20a080';
		}

		return $color;
	}

	function getTemplateContents($template = '', $extract_body = false)
	{
		// Load report's template from a file (in assets folder)
		$template_name = preg_replace('~[^a-z0-9\.-]+~s', '', $template);
		$path_to_template = CWIS_ASSETS_PATH . DIRECTORY_SEPARATOR . $template_name;
		if ($template_name && is_file($path_to_template)) {
			$template_contents = file_get_contents($path_to_template);
			//implode("\n", file($path_to_template));
		} else {
			$template_contents = 'Error: Cannot load template file "' . $template_name . '".';
		}

		// Extract body content (for NG-template)
		if ($extract_body) {
			$matches = array();
			if (preg_match("#\<\!--\[begin\]--\>(.*)\<\!--\[end\]--\>#smi", $template_contents, $matches)) {
				$template_contents = $matches[1];
			}
		}

		return $template_contents;
	}

	/**
	 * Prints scan results.
	 * @param string $var_name
	 * @param string $name
	 * @param string $type
	 * @return string
	 */
	function printScanResultSummary($var_name = '', $name = '', $type = 'info', $plain = false)
	{
		// Get scan result
		$scan_result = $this->builder->getScanResultByVar($var_name);
		if (($count = count($scan_result)) >= 0) {

			// Validate result type and define context
			$context = $this->builder->getScanResultContext($type);
			if ($plain) {
				return '[' . $type . '] ' . $name . ' (' . $count . ')' . PHP_EOL;
			} else {
				return '<tr><td class="text-' . $context . '">' . $name . '</td>
                    <td><b class="pull-right label label-' . $context . '">' . $count . '</b></td></tr>';
			}
		}

		return '';
	}

	/**
	 * Returns scan results as a standardized object.
	 * @return array
	 */
	function printListResultsObject()
	{
		return $this->report_result_entries;
	}

	function printListJsonString()
	{
		// Encode entry name and file details content
		foreach ($this->report_result_entries as $i => $entry) {
			$result_entries_list[$i]['name'] = urlencode($entry['name']); // make filename safe
			$result_entries_list[$i]['content'] = base64_encode($entry['content']); // encode content
		}

		return json_encode($this->report_result_entries);
	}

	function printListHtmlTable($var_name = '')
	{
		if (empty($this->report_result_entries)) {
			return '';
		}

		// Generate table ID
		$table_name = 'table_' . rand(1000000, 9000000);

		// Build table header
		$result = '<div class="table-responsive">';
		$result .= '<table id="' . $table_name . '" class="cwisTable table table-striped">'
				. '<thead><tr>'
				. '<th class="no-sort"></th>'
				. '<th>' . _CWIS_FILE_PATH . '</th>'
				. '<th>' . _CWIS_FILE_CHANGED . '</th>'
				. '<th>' . _CWIS_FILE_MODIFIED . '</th>'
				. '<th>' . _CWIS_FILE_SIZE . "</th>"
				. '<th class="hidden">C</th>'
				. '<th class="hidden">M</th>'
				. '<th class="hidden">S</th>'
				//. '<th class="hidden">CRC32</th>'
				. '</tr></thead>';

		// Build table body
		$result .= "<tbody>";
		foreach ($this->report_result_entries as $i => $entry) {
			$entry_index = $entry['id'];
			$entry_name = $entry['name'];

			// hide empty entries
			if (!$entry_name) {
				continue;
			}

			// Process file datetime and file size
			$filestat_changed = $entry['changed'] > 0 ? date("d/m/Y H:i:s", $entry['changed']) : '-';
			$filestat_modified = $entry['modified'] > 0 ? date("d/m/Y H:i:s", $entry['modified']) : '-';
			$filestat_size = $entry['size'] > 0 ? $this->utilities->formatBytes($entry['size'], 2) : '-';

			// Build an element ID using file index
			$entry_sig_id = 'id_z' . (is_int($entry_index) ? $entry_index + 1 : '_' . $i);
			/*
			  if ($sig_ids != null) {
			  $entry_sig_id = 'id_' . $entry['sig'];
			  } else {
			  $entry_sig_id = 'id_z' . rand(1000000, 9000000);
			  }
			 */
			$result .= '<tr class="tbg' . ( $i % 2 ) . '" o="' . $entry_sig_id . '">';

			// Control buttons
			$result .= '<td><div class="file_ctrl">';
			//if ($sig_ids) {
			/*
			  $result .= '<button type="button" onclick="return hsig(\'' . $entry_sig_id . '\')" '
			  . 'class="close" aria-label="Close" title="' . _CWIS_LABEL_CLOSE . '">'
			  . '<span aria-hidden="true">&times;</span></button><br />';
			 */
			//}
			//
            // Hash management buttons
			if ($this->config->isPremium()) {
				if ($var_name === 'Whitelisted') {
					$result .= '<button type="button" '
							. 'class="close" aria-label="Remove" title="' . _CWIS_LABEL_REMOVE_FILE_HASH . '">'
							. '<span aria-hidden="true">&minus;</span></button> ';
				} elseif ($var_name !== 'SkippedDirs') {
					$result .= '<button type="button" '
							. 'class="close" aria-label="Insert" title="' . _CWIS_LABEL_INSERT_FILE_HASH . '">'
							. '<span aria-hidden="true">&plus;</span></button> ';
				}
			}
			$result .= '</div></td>';

			// Process file details (code preview)
			if ($entry['content']) {
				// Output only valid byte sequences filtered by utf8_sanitize
				$entry_details_content = '<div class="details file_details">' .
						$entry['content'] . '</div>';
			} else {
				$entry_details_content = '';
			}

			// File editor placeholder
			$entry_details_content .= '<div class="file_editor'
					. ($var_name === 'Whitelisted' ? ' whitelisted' : '')
					. '"></div>';

			// Get filename and make safe
			$result .= '<td><p class="file_path text-info" style="color:#245269">'
					. htmlspecialchars($entry_name ? $entry_name : '-', ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8')
					. '</p>' . $entry_details_content . '</td>';

			$result .= '<td><div class="file_stat">' . $filestat_changed . '</div></td>';
			$result .= '<td><div class="file_stat">' . $filestat_modified . '</div></td>';
			$result .= '<td><div class="file_stat">' . $filestat_size . '</div></td>';
			$result .= '<td class="hidden">' . $entry['changed'] . '</td>';
			$result .= '<td class="hidden">' . $entry['modified'] . '</td>';
			$result .= '<td class="hidden">' . $entry['size'] . '</td>';
			//$result .= '<td class="hidden">' . $entry_sig_id . '</td>';
			$result .= '</tr>';
		}

		$result .= '</tbody></table></div>';

		return $result;
	}

	function printListPlainText()
	{
		// Build result
		$result = '';
		foreach ($this->report_result_entries as $entry) {

			// Get entry name and make it safe
			$result .= ($entry['name'] ? $this->utilities->filenameShrink($entry['name']) : '-') . PHP_EOL;
		}

		return $result;
	}

	function generatePlaceholderReplacements()
	{
		$placeholder_replacements = array();
		foreach ($this->queue as $param => $prop1) {
			if (!is_array($prop1)) {
				// For example: $this->queue->progress = @@QUEUE_PROGRESS@@
				$placeholder = strtoupper('@@QUEUE_' . $param . '@@');
				$placeholder_replacements[$placeholder] = $prop1;
				continue;
			}

			// Process the first level
			foreach ($prop1 as $key1 => $val1) {
				if (!is_array($val1)) {
					// Bytes and time formatting
					if ($key1 === 'memory') {
						$val1 = $this->utilities->formatBytes($val1, 2);
					} else
					if ($key1 === 'timelast' || $key1 === 'timestamp') {
						$val1 = $this->utilities->formatDates($val1);
					}

					// For example: $this->queue->scan->license = @@QUEUE_SCAN_LICENSE@@
					$placeholder = strtoupper('@@QUEUE_' . $param . '_' . $key1 . '@@');
					$placeholder_replacements[$placeholder] = $val1;
					continue;
				}

				// Process the second level
				foreach ($val1 as $key2 => $val2) {
					// For example: $this->queue->scan['directories']['found'] = @@QUEUE_SCAN_DIRECTORIES_FOUND@@
					$placeholder = strtoupper('@@QUEUE_' . $param . '_' . $key1 . '_' . $key2 . '@@');
					$placeholder_replacements[$placeholder] = $val2;
				}
			}
		}

		return $placeholder_replacements;
	}

	function printReportSummarySiteCheck()
	{
		// Fetch sitecheck results
		$cwisSiteCheck = new CwisSiteCheck();
		$std = json_decode($cwisSiteCheck->getCachedData());

		$site_url = $site_status = $site_blacklists = null;
		if ($std && isset($std->data->site)) {
			$site_url = $std->data->site->url;
			$site_status = $std->data->site->status->blacklisted;
			$site_blacklists = count($std->data->site->blacklist);
		}

		$result = '<table class="main-table table table-striped" border="0" cellpadding="5px" cellspacing="0" width="100%" style="border-spacing:0;margin-bottom:1.5em">';
		$result .= '<thead>';
		$result .= '<tr><th colspan=2 style="color:#555;text-align:inherit;border-bottom:3px solid #eee">Blacklist Monitoring - Domain blacklist check tool</th></tr>';
		$result .= '</thead>';

		$result .= '<tbody>';
		$result .= '<tr><td width=50%" style="color:#555;border-bottom:1px solid #eee">Site URL</td><td style="border-bottom:1px solid #eee"><a href="' . $site_url . '" style="color:#20a080">' . $site_url . '</a></td></tr>';
		$result .= '<tr><td width=50%" style="color:#555;border-bottom:1px solid #eee">Status</td><td style="border-bottom:1px solid #eee">' . ($site_status ?
				'<span class="text-danger" style="color:#a94442">The Site Is Blocked.' : '<span class="text-success" style="color:#3c763d">The Site Is Not Blocked.') . '</span></td></tr>';
		$result .= '<tr><td width=50%" style="color:#555;border-bottom:1px solid #eee">Web Trust</td><td style="border-bottom:1px solid #eee">' . ($site_status ?
				'<span class="text-danger" style="color:#a94442">Blacklisted / Blocked – that means that one of the major search engines and/or security companies (such as Google, McAfee, Norton, etc) are blocking access to your website for security reasons.' : '<span class="text-success" style="color:#3c763d">Currently, NOT Blacklisted (' . $site_blacklists . ' Blacklists Checked).' ) . '</span></td></tr>';
		$result .= '</tbody>';
		$result .= '</table>';

		return $result;
	}

	function printReportSummaryByThreatType($threat_type)
	{
		// Build table header
		$result = '<table class="main-table table table-striped" border="0" cellpadding="5px" cellspacing="0" width="100%" style="border-spacing:0;margin-bottom:1.5em">';

		// Display report category
		if (isset($this->config->report_cats[$threat_type])) {
			$result .= '<thead>';
			$category = $this->config->report_cats[$threat_type];
			$result .= '<tr><th colspan=2 style="color:#555;text-align:inherit;border-bottom:3px solid #eee">' . $category['heading'] . ' - ' . $category['descr'] . '</th></tr>';
			$result .= '</thead>';
		}

		// Display report summary
		if (isset($this->config->report_vars[$threat_type])) {
			$result .= '<tbody>';
			$report_vars = $this->config->report_vars[$threat_type];
			foreach ($report_vars as $var => $name) {
				$count = count($this->results[$var]);
				$result .= '<tr><td width=50%" style="color:#555;border-bottom:1px solid #eee">' . $name . '</td><td style="color:#555;border-bottom:1px solid #eee">' .
						($count ? '<span class="label label-' . $this->builder->getScanResultContext($threat_type) . '" style="display:inline;color:#fff;background:#'
						. $this->getScanResultBackground($threat_type) . ';font-size:75%;vertical-align:baseline;border-radius:.15em;padding:.2em .6em .3em">' . $count . '</span> <small class="text-danger" style="color:#a94442">Go to the admin panel for check &amp; remove</small>' :
						'<b class="text-success" style="color:#3c763d">√ OK</b>') .
						'</td></tr>';
			}
			$result .= '</tbody>';
		}

		// Close tag
		$result .= '</table>';

		return $result;
	}

	function replaceReportPlaceholders($report_contents = '', $plain = false)
	{
		// --- Summary ---
		if (!$plain) {
			$summary = '<table class="table">'
					. '<thead><tr><th colspan="2">' . _CWIS_SUMMARY_SCAN_RESULTS . '</th></tr></thead>'
					. '<tbody>';
		} else {
			$summary = '[' . strtoupper(_CWIS_SUMMARY_SCAN_RESULTS) . ']' . PHP_EOL;
		}

		// --- Report Content ---
		$main_report_content = '';

		// Print threats summary
		foreach ($this->config->report_vars as $threat_type => $report_vars) {
			foreach ($report_vars as $var_name => $name) {
				$summary .= $this->printScanResultSummary($var_name, $name, $threat_type, $plain);

				// HTML report
				if ($this->report_table) {
					$this->processNow($var_name);
					$main_report_content .= $this->printReport();
				}
			}
		}

		// Add summary notice
		if (!$plain) {
			$summary .= '<tr><td colspan="2"><small class="details">' . _CWIS_SUMMARY_NOTICE . '</small></td></tr>'
					. '</tbody></table>';
		}

		// Open and close tags
		if (!$plain) {
			$report_open = '<h2 class="title">';
			$report_close = '</h2>';
		} else {
			$report_open = '== ';
			$report_close = ' ==';
		}

		// Print reports
		$report_types = array();
		foreach ($this->config->report_vars as $threat_type => $report_vars) {
			if (!isset($report_types[$threat_type])) {
				$report_types[$threat_type] = 0;
			}

			// Process reports by types
			foreach ($report_vars as $var_name => $name) {
				$this->processNow($var_name);

				// Skip info reports and empty reports
				if ($this->report_table) {
					$report_types[$threat_type] ++;

					// Print critical/warnings title
					if ($report_types[$threat_type] === 1) {
						if ($threat_type === 'vuln') {
							$main_report_content .= $report_open . _CWIS_TITLE_VULNERABILITIES . $report_close;
						} elseif ($threat_type === 'crit') {
							$main_report_content .= $report_open . _CWIS_TITLE_CRITICAL . $report_close;
						} elseif ($threat_type === 'info') {
							$main_report_content .= $report_open . _CWIS_TITLE_INFO . $report_close;
						} elseif ($threat_type === 'warn') {
							$main_report_content .= $report_open . _CWIS_TITLE_WARNINGS . $report_close;
						} elseif ($threat_type === 'susp') {
							$main_report_content .= $report_open . _CWIS_TITLE_SUSPICIOUS . $report_close;
						}
					}

					$main_report_content .= $this->printReport($plain);
				}
			}
		}

		// Print PHP Info
		if (!$plain && !(CWIS_IS_CLI && !CWIS_IS_CGI)) {
			$this->processPHPInfo();
			$main_report_content .= $this->printReport();
		}

		// --- Report Summary ---
		$main_report_summary = '';

		// Malware Scan Results, Detected Vulnerabilities and Detected Spyware And Adware
		$main_report_summary .= $this->printReportSummaryByThreatType('crit');
		$main_report_summary .= $this->printReportSummaryByThreatType('vuln');
		$main_report_summary .= $this->printReportSummaryByThreatType('warn');
		$main_report_summary .= $this->printReportSummarySiteCheck();

		// Prepare vars used in replacements
		$memory_usage = function_exists('memory_get_peak_usage') ? memory_get_peak_usage() : memory_get_usage();
		$memory_get_peak_usage = ($memory_usage > 0) ?
				sprintf(_CWIS_MEMORY_USED, $this->utilities->formatBytes($memory_usage, 2)) : '';

		// Scan statistics
		$scan_statistics = sprintf(_CWIS_SIGNATURES_KNOWN_AND_TIME,
							 $this->queue->system['signatures'] ? $this->queue->system['signatures'] : '?',
							 $this->utilities->formatSeconds($this->queue->time['elapsed'] ? $this->queue->time['elapsed'] : $this->queue->time['taken']),
										date('d-m-Y ? H:i:s', floor(CWIS_START_TIME)), date('d-m-Y ? H:i:s'));

		// Generate placeholder replacements
		$placeholder_replacements = array_merge(
				$this->generatePlaceholderReplacements(),
	array(
			// Main title
			'@@MAIN_TITLE@@'			 => _CWIS_MAIN_TITLE,
			'@@VERSION@@'				 => CWIS_VERSION,
			'@@HEAD_TITLE@@'			 => sprintf(_CWIS_MAIN_HTML_TITLE, $this->config->scan_path),
			'@@HTTP_HOST@@'				 => $this->config->http_host,
			//
			// Signatures known, elapsed, started, stopped...
			'@@STAT@@'					 => $scan_statistics,
			'@@SERVICE_INFO@@'			 => htmlspecialchars("[" . $this->queue->system['signatures'] . "][" . $this->queue->statistics['whitelist'] . "]"),
			//
			// Scan info
			'@@PATH@@'					 => sprintf(_CWIS_REPORT_SCAN_PATH, '<b>' . $this->config->scan_path . '</b>'),
			'@@MODE@@'					 => sprintf(_CWIS_REPORT_SCAN_LEVEL,
							  $this->config->scan_level . ' (' . $this->config->getScanLevelStr() . ')'),
			'@@FOUND@@'					 =>
			sprintf(_CWIS_FOUND_DIRECTORIES_AND_FILES, $this->queue->scan['directories']['found'],
		   $this->queue->scan['files']['found']),
			'@@SCANNED@@'				 =>
			sprintf(_CWIS_SCANNED_DIRECTORIES_AND_FILES, $this->queue->scan['directories']['scanned'],
		   $this->queue->scan['files']['scanned']),
			'@@SKIPPED@@'				 =>
			sprintf(_CWIS_SKIPPED_DIRECTORIES_AND_FILES, $this->queue->scan['directories']['skipped'],
		   $this->queue->scan['files']['skipped']),
			"@@MEMORY@@"				 => $memory_get_peak_usage,
			//
			// Quick scan warning
			'@@QUICK_SCAN_WARNING@@'	 =>
			($this->config->scan_all_files ? '' : _CWIS_QUICK_SCAN_WARNING),
			//
			// Summary
			'@@SUMMARY_TITLE@@'			 => _CWIS_SUMMARY_TITLE,
			'@@SUMMARY@@'				 => $summary,
			'@@SERVICES_OFFER@@'		 => $this->show_offer ? _CWIS_SERVICES_OFFER : _CWIS_ABOUT_SCANNER_SERVICE,
			//
			// Main report content
			'@@MAIN_REPORT_CONTENT@@'	 => $main_report_content,
			//
			// Main summary content
			'@@MAIN_REPORT_SUMMARY@@'	 => $main_report_summary,
			//
			// Other info
			'@@MAIN_CAUTION@@'			 => _CWIS_MAIN_CAUTION,
			'@@MAIN_CREDITS@@'			 => !$this->config->isPremium() ? _CWIS_MAIN_CREDITS : '',
			'@@FOOTER_DISCLAIMER@@'		 => _CWIS_FOOTER_DISCLAIMER,
		));

		/* echo '<pre>';
		  print_r($placeholder_replacements);
		  echo '</pre>'; */

		// Replace placeholders with the values
		foreach ($placeholder_replacements as $search => $replace) {
			$report_contents = str_replace($search, $replace, $report_contents);
		}

		// Return report
		if (!$plain) {
			return $report_contents;
		} else {
			// Remove tags from report
			$report_contents = strip_tags($report_contents);

			// Insert line padded with "=" character
			$first_line_pos = strpos($report_contents, '=' . PHP_EOL);
			return substr_replace($report_contents, str_pad('', $first_line_pos - 1, '=') . PHP_EOL, $first_line_pos + 3, 0);
		}
	}

	///////////////////
	// --- PUBLIC ---//
	///////////////////

	function buildHtmlScanReport($format = 'html', $template = 'tmpl-report.html')
	{
		// Load report's template from a file
		$report_contents = $this->getTemplateContents($template, $format === 'body');
		$this->logger->debugMessage("Building HTML report (mode = " . $this->config->scan_level . ")");

		return $this->replaceReportPlaceholders($report_contents, $plain = false);
	}

	function buildHtmlSummaryReport($template = 'tmpl-summary.html')
	{
		// Load summary's template from a file
		$report_contents = $this->getTemplateContents($template);
		$this->logger->debugMessage("Building HTML summary (mode = " . $this->config->scan_level . ")");

		return $this->replaceReportPlaceholders($report_contents, $plain = false);
	}

	function buildTextScanReport($template = 'tmpl-report.txt')
	{
		// Load report's template from a file
		$report_contents = $this->getTemplateContents($template);
		$this->logger->debugMessage("Building TEXT report (mode = " . $this->config->scan_level . ")");

		return $this->replaceReportPlaceholders($report_contents, $plain = true);
	}

	/**
	 * Returns standard HTML or plain-text report as a string.
	 * @param bool $plain
	 * @return string
	 */
	function printReport($plain = false)
	{
		if ($plain) {
			if (!$this->report_text) {
				$this->report_text = _CWIS_NO_DATA_AVAILABLE;
			}

			return '[' . strtoupper($this->report_label) . ']' . PHP_EOL
					. $this->report_text . PHP_EOL;
		} else {
			$result = '';

			// Report name
			if ($this->report_name) {
				$result .= '<h4 class="scanReportName">' . $this->report_name . '</h4>';
			}

			// Report heading
			if ($this->report_message) {
				$result .= '<h5 class="scanReportHeading text-' . $this->report_context . '">'
						. ($this->report_count ? ' <b class="label label-' . $this->report_context . '">'
						. $this->translations->pluralize(_CWIS_LABEL_FILE_PLURAL, $this->report_count)
						. '</b> &rarr; ' : '')
						. $this->report_message . '</h5>';
			}

			// Summary notice
			if ($this->report_count && $this->report_message && $this->report_context !== 'info') {
				$result .= '<p class="text-muted" style="color:#777"><small>' . _CWIS_SUMMARY_NOTICE . '</small></p>';
			}

			// Report table
			if ($this->report_table) {
				$result .= '<div class="scanReportWrapper">' . $this->report_table . '</div>';
			}

			return $result . PHP_EOL;
		}
	}

	/**
	 * Returns HTML scan report optimized for JS modal dialogs.
	 * @return string
	 */
	function printModalReport()
	{
		return $this->printReport()
				. _CWIS_FOOTER_DISCLAIMER
				. PHP_EOL;
	}

}

class CwisServerEnvInfo
{

	// Configuration options
	var $config;
	//
	var $php_funcs = array(
		'apache_child_terminate', 'chdir', 'chgrp', 'chmod', 'chown', 'dl', 'escapeshellarg',
		'escapeshellcmd', 'exec', 'extension_loaded', 'fsockopen', 'ftp_exec', 'get_current_user',
		'getmygid', 'getmyid', 'getmyuid', 'ini_restore', 'ini_set', 'leak', 'mysql_list_dbs',
		'passthru', 'pclose', 'pcntl_exec', 'pfsockopen', 'phpinfo', 'popen', 'posix_kill',
		'posix_setpgid', 'posix_setsid', 'posix_setuid', 'proc_close', 'proc_get_status',
		'proc_getstatus', 'proc_nice', 'proc_open', 'proc_terminate', 'putenv', 'safe_dir',
		'shell_exec', 'show_source', 'shown_source', 'symlink', 'system', 'virtual',
	);
	var $ini_get_enabled, $php_info = '';
	var $result = array();
	var $result_descriptions = array(
		'info'		 => _CWIS_PHPI_SYSTEM_INFO,
		'php_fail'	 => _CWIS_PHPI_SECURITY_WARNINGS,
		'php_pass'	 => _CWIS_PHPI_CONFIGURED_CORRECTLY,
		'func_on'	 => _CWIS_PHPI_ENABLED_FUNCTIONS,
		'func_off'	 => _CWIS_PHPI_DISABLED_FUNCTIONS,
		'server'	 => _CWIS_PHPI_SERVER_ENVIRONMENT,
		'cms'		 => _CWIS_PHPI_CMS_DETECTED,
		'plugins'	 => _CWIS_PHPI_PLUGINS_DETECTED,
	);

	/**
	 * Use this method as a class constructor.
	 * @param mixed $config
	 */
	function construct($config = null)
	{
		// Pass configuration options
		if (gettype($config) === 'object') {
			$this->config = $config;
		}
	}

	function compareValues($value_1, $value_2, $operator)
	{
		switch ($operator) {
			case '==':
				return $value_1 == $value_2;

			case '===':
				return $value_1 === $value_2;

			case '!=':
			case '<>':
				return $value_1 != $value_2;

			case '!==':
				return $value_1 !== $value_2;

			case '<':
				return $value_1 < $value_2;

			case '>':
				return $value_1 > $value_2;

			case '<=':
				return $value_1 <= $value_2;

			case '>=':
				return $value_1 >= $value_2;
		}

		return null;
	}

	function extractResult($type = '', $key = '', $is_safe_if = '', $placeholder = '-?-')
	{
		// Use config data
		if ($key === 'memory_limit' && $this->config->memory_limit_default) {
			$value = $this->config->memory_limit_default;
		}
		// Extract from phpinfo()
		elseif ($this->php_info) {
			$value = $this->extractValue($this->php_info, $key);
		}
		// Extract using ini_get()
		elseif ($this->ini_get_enabled) {
			if ('1' === ($value = ini_get($key))) {
				$value = 'On';
			}
		}
		// Insert empty result
		else {
			return $this->insertResult($type, $key, '');
		}

		// Set default PHP type to "test passed"
		if (substr($type, 0, 3) === 'php' && $type !== 'php_fail') {
			$type = 'php_pass';
		}

		// Process a conditional parameter
		if ($is_safe_if && substr($type, 0, 3) === 'php') {
			$matches = array();
			if (preg_match("#([\!\<\>\=]+)\s*(.*)#", $is_safe_if, $matches)) {
				$compare_operator = trim($matches[1]);
				$compare_value = $matches[2];

				// Compare values
				$type = $this->compareValues($value, $compare_value, $compare_operator) ? 'php_pass' : 'php_fail';
			}
		}

		return $this->insertResult($type, $key, $value ? $value : $placeholder);
	}

	function extractValue(& $str, $name)
	{
		$result = array();
		if (preg_match('|<tr><td class="e">\s*' . $name . '\s*</td><td class="v">(.+?)</td>|sm', $str, $result)) {
			return str_replace('no value', '', strip_tags($result[1]));
		}
	}

	function getPhpInfo()
	{
		$php_info = '';

		// Get and parse PHP-info
		if (functions_exists('phpinfo')) {
			ob_start();
			phpinfo();
			$php_info_raw = str_replace('border: 1px', '', ob_get_contents());
			ob_end_clean();

			$php_info_body = array();
			if ($php_info_raw && preg_match('#<body>(.*)</body>#smiu', $php_info_raw, $php_info_body)) {
				$php_info = $php_info_body[1];
			}
		}

		return $php_info;
	}

	function getServerEnvironment()
	{
		return array(
			'Admin Email'			 => $this->getServerVar('SERVER_ADMIN'),
			'HTTP Host'				 => $this->getServerVar('HTTP_HOST'),
			'Server Addr'			 => $this->getServerVar('SERVER_ADDR'),
			'Server Software'		 => $this->getServerVar('SERVER_SOFTWARE'),
			'Server Gateway'		 => $this->getServerVar('GATEWAY_INTERFACE'),
			'Server Signature'		 => $this->getServerVar('SERVER_SIGNATURE'),
			'Server Hostname'		 => @php_uname('n'),
			'Server Platform'		 => @php_uname('s') . ' ' . @php_uname('r') . ' ' . @php_uname('v'),
			'Server Architecture'	 => @php_uname('m'),
			'User Name'				 => 'uid: ' . @getmyuid() . ', gid: ' . @getmygid(),
		);
	}

	function getServerVar($name = '')
	{
		return !empty($_SERVER[$name]) ? $_SERVER[$name] : 'None';
	}

	function insertResult($type = '', $key = '', $value = '')
	{
		if (!isset($this->result[$type])) {
			return false;
		}

		if ($key) {
			if (is_array($key)) {
				// Parse pairs $key => $value
				foreach ($key as $i => $val) {
					// Optional arrays support
					$key[$i] = is_array($val) ? implode(', ', $val) : $val;
				}

				$this->result[$type] = array_merge($this->result[$type], $key);
			} else {
				$this->result[$type][$key] = $value;
			}
		} elseif ($value) {
			$this->result[$type][] = $value;
		}

		return true;
	}

	function parseResultInfo($report_format = 'html')
	{
		// Reset a result array
		$this->result = array();
		foreach ($this->result_descriptions as $type => $description) {
			$this->result[$type] = array();
		}

		// PHP OS
		$this->insertResult('info', 'PHP OS', PHP_OS);

		// PHP version
		$this->insertResult('info', 'PHP Version', PHP_VERSION);

		// Check if ini_get() is enabled
		$this->ini_get_enabled = functions_exists('ini_get');

		// Get and parse PHP info
		$this->php_info = $this->getPhpInfo();
		if ($this->php_info) {
			// Basic system info
			$this->extractResult('info', 'System');
			$this->extractResult('info', 'Server API');

			// Ini-file path
			if ($report_format === 'ng') {
				$this->extractResult('info', 'Loaded Configuration File');
			}
		} else {
			// phpinfo (and ini_get) is/are disabled
			$message = $this->ini_get_enabled ?
					'phpinfo() is disabled' : 'phpinfo() and ini_get() are disabled';
			$this->insertResult('info', _CWIS_RESULT_PHP_INFO, $message);
		}

		// Test sensitive PHP.ini values
		/////////////////////////////////////////////////////////////////
		//
        // HIGH: Function fopen() is allowed to open URLs.
		$this->extractResult('php', 'allow_url_fopen', '!= On');

		// HIGH: Functions include/require() can include URLs.
		$this->extractResult('php', 'allow_url_include', '!= On');

		// MEDIUM: No functions disabled.
		$this->extractResult('php', 'disable_functions', '!= ');

		// MEDIUM: Display_errors is on.
		$this->extractResult('php', 'display_errors', '!= On');
		$this->extractResult('php', 'display_startup_errors', '!= On');

		// HIGH: PHP can load extensions during runtime.
		$this->extractResult('php', 'enable_dl', '!= On');

		// LOW: Error reporting is off.
		$this->extractResult('php', 'error_reporting', '!= ');

		// LOW: PHP is exposed by HTTP headers.
		$this->extractResult('php', 'expose_php', '!= On');

		// You are not logging errors.
		$this->extractResult('php', 'log_errors', '== On');

		// How to find a script sending SPAM?
		// http://wiki.vds64.com/index.php/Find_Spam_Script
		$this->extractResult('php', 'mail.add_x_header', '== On');

		// HIGH: Magic quotes activated.
		$this->extractResult('php', 'magic_quotes_gpc', '!= On');
		$this->extractResult('php', 'magic_quotes_runtime', '!= On');
		$this->extractResult('php', 'magic_quotes_sybase', '!= On');

		// HIGH: Memory limit deactivated.
		$this->extractResult('php', 'memory_limit', '!=');

		// LOW: Option open_basedir not set.
		$this->extractResult('php', 'open_basedir', '!= ');

		// CRITICAL: Option register_globals is on.
		$this->extractResult('php', 'register_globals', '!= On');

		// HIGH: Security and Safe Mode check
		if (PHP_VERSION_ID >= 50300) {
			$this->extractResult('php', 'safe_mode', '== On');
		}

		// Checking list of sensitive functions
		sort($this->php_funcs);
		foreach ($this->php_funcs as $php_func_name => $php_func_description) {
			// Raplace array index with variable name 
			$php_func_name = is_numeric($php_func_name) ? $php_func_description : $php_func_name;

			// Check function status
			$php_func_on = (functions_exists($php_func_name));
			$this->insertResult('func_' . ($php_func_on ? 'on' : 'off'), $php_func_name, $php_func_description);
		}

		/////////////////////////////////////////////////////////////////////
		// Server environment
		$this->result['server'] = $this->getServerEnvironment();

		// Return result array
		return $this->result;
	}

	function printHtmlReport($report_format = 'html')
	{
		if ($report_format === 'json') {
			$output = array();

			foreach ($this->result as $type => $results) {
				if (empty($results)) {
					continue;
				}

				// Define context
				switch ($type) {
					case 'php_fail':
						$context = 'danger';
						break;

					case 'func_on':
						$context = 'warning';
						break;

					case 'php_pass':
					case 'func_off':
						$context = 'success';
						break;

					case 'cms':
					case 'plugins':
						$context = 'info';
						break;

					default:
						$context = 'default';
				}

				// Result description
				$description = isset($this->result_descriptions[$type]) ?
						$this->result_descriptions[$type] : $type;

				// Build the report content
				if ($type === 'func_on' || $type === 'func_off') {
					$output[] = array(
						'type'		 => $type,
						'name'		 => $description,
						'context'	 => $context,
						'results'	 => array_values($results),
						'count'		 => count($results)
					);
				} else {
					$output[] = array(
						'type'		 => $type,
						'name'		 => $description,
						'context'	 => $context !== 'default' ? $context : 'muted',
						'results'	 => $results, // key => values
						'count'		 => count($results)
					);
				}
			}

			return $output;
		} else
		if ($report_format === 'body' || $report_format === 'ng') {
			ob_start();
			?>
			<div uib-accordion close-others="false">
				<?php
				foreach ($this->result as $type => $results) {
					if (empty($results)) {
						continue;
					}

					// Define context
					switch ($type) {
						case 'php_fail':
							$context = 'danger';
							break;

						case 'func_on':
							$context = 'warning';
							break;

						case 'php_pass':
						case 'func_off':
							$context = 'success';
							break;

						case 'cms':
						case 'plugins':
							$context = 'info';
							break;

						default:
							$context = 'default';
					}

					// Result description
					$description = isset($this->result_descriptions[$type]) ? $this->result_descriptions[$type] : $type;

					// Build the report content
					if ($type === 'func_on' || $type === 'func_off') {
						$content = '<span class="text-' . $context . '">'
								. implode(', ', $results) . '</span>';
					} else {
						$content = '';
						foreach ($results as $key => $value) {
							$content .= htmlspecialchars($key, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . ': <b class="text-'
									. ($context !== 'default' ? $context : 'muted') . '">'
									. htmlspecialchars($value, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</b><br />';
						}
					}
					?>
					<div uib-accordion-group is-open="<?php echo $type === 'info' ? 'true' : 'false'; ?>" 
						 heading="<?php
						 echo $description;
						 echo $context !== 'default' ? ' (' . count($results) . ')' : '';
						 ?>" 
						 class="bootstrap-panel accordion-panel panel-<?php echo $context; ?>"><?php echo $content; ?>
					</div>

					<?php
				}
				?>
			</div>

			<?php
			$html = ob_get_contents();
			ob_end_clean();
		} else {
			ob_start();
			?>
			<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
				<?php
				foreach ($this->result as $type => $results) {
					if (empty($results)) {
						continue;
					}

					// Define context
					switch ($type) {
						case 'php_fail':
							$context = 'danger';
							break;

						case 'func_on':
							$context = 'warning';
							break;

						case 'php_pass':
						case 'func_off':
							$context = 'success';
							break;

						case 'cms':
						case 'plugins':
							$context = 'info';
							break;

						default:
							$context = 'default';
					}

					// Result description
					$description = isset($this->result_descriptions[$type]) ? $this->result_descriptions[$type] : $type;

					// Build the report content
					if ($type === 'func_on' || $type === 'func_off') {
						$content = '<span class="text-' . $context . '">'
								. implode(', ', $results) . '</span>';
					} else {
						$content = '';
						foreach ($results as $key => $value) {
							$content .= htmlspecialchars($key, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . ': <b class="text-'
									. ($context !== 'default' ? $context : 'muted') . '">'
									. htmlspecialchars($value, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</b><br />';
						}
					}
					?>
					<div class="panel panel-<?php echo $context; ?>">
						<div class="panel-heading" role="tab" id="heading<?php echo ucfirst($type); ?>">
							<h4 class="panel-title">
								<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" 
								   href="#collapse<?php echo ucfirst($type); ?>" aria-controls="collapseThree"
								   aria-expanded="<?php echo $type === 'info' ? 'true' : 'false'; ?>">
									<b><?php echo $description; ?></b>
									<?php echo $context !== 'default' ? ' (' . count($results) . ')' : ''; ?>
								</a>
							</h4>
						</div>
						<div id="collapse<?php echo ucfirst($type); ?>" role="tabpanel" 
							 class="panel-collapse collapse<?php echo $type === 'info' ? ' in' : ''; ?>" 
							 aria-labelledby="heading<?php echo ucfirst($type); ?>">
							<div class="panel-body">
								<?php echo $content; ?>
							</div>
						</div>
					</div>

					<?php
				}
				?>
			</div>

			<?php
			$html = ob_get_contents();
			ob_end_clean();
		}

		return $html;
	}

}
