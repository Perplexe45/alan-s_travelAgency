<?php

// ezscan7objrldgpfvmqkdthyuwi4x2x5
if (!defined('CWIS_SIGNATURE')) {
	header('HTTP/1.0 403 Forbidden');
	die('-1');
}

class CwisPdo
{

	var $errorMessage = '';
	var $driver = null, $drivers = array();
	var $link = null;

	// --- PDO DRIVERS ---

	/**
	 * Use this method as a class constructor.
	 * @param null|string $driver
	 */
	function construct($driver = null)
	{
		$this->drivers = array();

		// Check MySql(i) extension
		if (functions_exists('mysqli_connect')) {
			$this->drivers[] = 'mysqli';
			if (null === $this->driver) {
				$this->driver = 'mysqli';
			}
		} elseif (functions_exists('mysql_connect')) {
			$this->drivers[] = 'mysql';
			if (null === $this->driver) {
				$this->driver = 'mysql';
			}
		}

		// Set selected driver
		if ($driver) {
			$this->setDriver($driver);
		}
	}

	/**
	 * Returns selected database driver.
	 * @return string
	 */
	function getDriver()
	{
		return $this->driver;
	}

	/**
	 * Returns an array of available PDO drivers.
	 * @return array
	 */
	function getAvailableDrivers()
	{
		return $this->drivers;
	}

	/**
	 * Sets selected database driver after validation.
	 * @param null|string $driver
	 */
	function setDriver($driver = null)
	{
		if (!$driver) {
			$this->driver = null;
		} elseif (in_array($driver, $this->drivers)) {
			$this->driver = $driver;
		}
	}

	/**
	 * Returns the last error message.
	 * @return string
	 */
	function getErrorMessage()
	{
		return $this->errorMessage;
	}

	// --- PDO METHODS ---

	/**
	 * Connects to selected database host (and optionally selects dbname).
	 * @param string $dbhost
	 * @param string $dbuser
	 * @param string $dbpass
	 * @param null|string $dbname
	 */
	function connect($dbhost, $dbuser, $dbpass, $dbname = null)
	{
		if ($this->driver === 'mysqli') {
			$this->link = @mysqli_connect($dbhost, $dbuser, $dbpass);
		} else {
			$this->link = @mysql_connect($dbhost, $dbuser, $dbpass);
		}

		// Get an error message
		if (!$this->link) {
			$this->errorMessage = $this->errorInfo();
		} else
		// Select database
		if ($dbname && $dbname !== '*' && !$this->select($dbname)) {
			$this->errorMessage = $this->errorInfo();
		}

		return $this->link;
	}

	/**
	 * Returns the text of the error message from the last operation on the database handle.
	 * @return string
	 */
	function errorInfo()
	{
		if ($this->driver === 'mysqli') {
			$message = $this->link ? mysqli_error($this->link) : mysqli_connect_error();
		} else {
			$message = mysql_error();
		}

		return $message;
	}

	/**
	 * Selects a MySQL database.
	 * @param string $dbname
	 * @return mixed
	 */
	function select($dbname)
	{
		$result = null;

		if ($this->driver === 'mysqli') {
			$result = mysqli_select_db($this->link, $dbname);
		} else {
			$result = mysql_select_db($dbname, $this->link);
		}

		return $result;
	}

	/**
	 * Returns the number of columns in the result set.
	 * @param mixed $result
	 * @return int
	 */
	function columnCount($result)
	{
		$num_fields = 0;
		if ($result) {
			if ($this->driver === 'mysqli') {
				$num_fields = mysqli_num_fields($result);
			} else {
				$num_fields = mysql_num_fields($result);
			}
		}

		return $num_fields;
	}

	/**
	 * Fetches the next row from a result set.
	 * @param mixed $result
	 */
	function fetch($result)
	{
		$row = false;

		if ($result) {
			if ($this->driver === 'mysqli') {
				$row = mysqli_fetch_row($result);
			} else {
				$row = mysql_fetch_row($result);
			}
		}

		return $row;
	}

	/**
	 * Returns an array containing all of the result set rows (analog to PDO::FETCH_COLUMN). 
	 * You can specify which column you want with the fetch_column parameter (set to NULL for all columns).
	 * @param mixed $result
	 * @param int|null $fetch_column
	 */
	function fetchAll($result, $fetch_column = 0)
	{
		$rows = array();

		while ($row = $this->fetch($result)) {
			$rows[] = (null !== $fetch_column && isset($row[$fetch_column])) ?
					$row[$fetch_column] : $row;
		}

		return $rows;
	}

	/**
	 * Sends an SQL query string.
	 * @param string $query
	 * @return mixed
	 */
	function query($query = '')
	{
		if ($this->driver === 'mysqli') {
			return mysqli_query($this->link, $query);
		} else {
			return mysql_query($query, $this->link);
		}
	}

	/**
	 * Returns tables list by database name or complete tables list.
	 * @param string $dbname
	 * @param array $exclude
	 * @return bool|array
	 */
	function showTables($dbname = '*', $exclude = array('information_schema', 'mysql',
		'performance_schema', 'sys'))
	{
		// Check connection
		if (!$this->link) {
			return false;
		}

		// List schemas and tables in a single query
		$result = $this->query('SELECT table_schema, table_name FROM INFORMATION_SCHEMA.TABLES');

		// Get all of the tables
		$dbname_tables = array();
		if ($result) {
			while ($dbrow = $this->fetch($result)) {
				if (!isset($dbrow[0]) || !isset($dbrow[1])) {
					continue;
				}

				// Table schema and name
				$table_schema = $dbrow[0];
				$table_name = $dbrow[1];

				// Exclude system schemas
				if (!empty($exclude) && in_array($table_schema, $exclude)) {
					continue;
				}

				// Filter tables by dbname passed
				if ($dbname && $dbname !== '*' && $dbname !== $table_schema) {
					continue;
				}

				// Combine table_schema with table_name
				$dbname_tables[] = $table_schema . '.' . $table_name;
			}
		} else {

			// Get databases names list
			if (!$dbname || $dbname === '*') {
				$result = $this->query('SHOW DATABASES');
				$dbnames = $this->fetchAll($result, null);
			} else {
				$dbnames = array($dbname);
			}

			// Exclude system schemas
			if (!empty($exclude)) {
				$dbnames = array_diff($dbnames, $exclude);
			}

			// Get all of the tables
			foreach ($dbnames as $dbname) {

				// http://dev.mysql.com/doc/refman/5.7/en/tables-table.html
				// The following statement are equivalent of $result = $this->query('SHOW TABLES FROM ' . $dbname);
				$result = $this->query('SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = \'' . $dbname . '\'');
				$table_names = $this->fetchAll($result);

				// Combine table_schema with table_name
				foreach ($table_names as $table_name) {
					$dbname_tables[] = $dbname . '.' . $table_name;
				}
			}
		}

		return $dbname_tables;
	}

}
