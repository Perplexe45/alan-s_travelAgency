<?php

// ezscan7objrldgpfvmqkdthyuwi4x2x5
if (!defined('CWIS_SIGNATURE')) {
	header('HTTP/1.0 403 Forbidden');
	die('-1');
}

/**
 * Communication Handlers
 * These patterns are designed to handle communication between disjoint objects.
 * http://blog.ircmaxell.com/2012/03/handling-plugins-in-php.html
 */
class CwisMediator
{

	var $events = array();

	function attach($event_name, $callback)
	{
		if (!isset($this->events[$event_name])) {
			$this->events[$event_name] = array();
		}
		$this->events[$event_name][] = $callback;
	}

	function trigger($event_name)
	{
		// The parameters to be passed to the callback
		$param_arr = func_get_args();
		array_shift($param_arr);

		// Trigger an event, exit on positive result
		foreach ($this->events[$event_name] as $callback) {
			if (($return_value = call_user_func_array($callback, $param_arr))) {
				return $return_value;
			}
		}
	}

}

class CwisObserverSubject
{

	var $observers = array();

	function attach($observer)
	{
		$this->observers[] = $observer;
	}

	function detach($observer)
	{
		$key = array_search($observer, $this->observers);
		if (false !== $key) {
			unset($this->observers[$key]);
		}
	}

	function notify($method)
	{
		// The parameters to be passed to the callback
		$param_arr = func_get_args();
		array_shift($param_arr);

		// Notify each observer
		foreach ($this->observers as $observer) {
			call_user_func_array(array($observer, $method), $param_arr);
		}
	}

}
