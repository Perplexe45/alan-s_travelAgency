<?php

/**
 * The admin-specific functionality of the plugin.
 * 
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
 * @link       https://cobweb-security.com
 * @since      4.1.9
 *
 * @package    Cwis
 * @subpackage Cwis/includes/gdpr
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_GDPR_Admin extends Cwis_Core_Foundation
{

    private $allowed_html = array(
        'a' => array(
            'href'   => true,
            'title'  => true,
            'target' => true,
        ),
    );
    private $default_consent_types;
    private $plugin_assets_url;

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
        $this->get_class_instance('Cwis_GDPR_Auditlog');
        $this->plugin_assets_url = plugin_dir_url(CWIS_PLUGIN_DIR_PATH . 'admin/index.php');
        $this->default_consent_types = array(
            'privacy-policy' => array(
                'name'         => 'Privacy Policy',
                'required'     => 1,
                'description'  => sprintf(__('You read and agreed to our %s.', CWIS_PLUGIN_SLUG),
                                             '<a href="" target="_blank">' . esc_html('Privacy Policy', CWIS_PLUGIN_SLUG) . '</a>'),
                'registration' => sprintf(__('You read and agreed to our %s.', CWIS_PLUGIN_SLUG),
                                             '<a href="" target="_blank">' . esc_html('Privacy Policy', CWIS_PLUGIN_SLUG) . '</a>'),
            )
        );
        // Based on https://automattic.com/cookies/#strictly%C2%A0necessary
        $this->default_cookie_types = array(
            'strictly-necessary' => array(
                'name'          => 'Strictly Necessary',
                'always_active' => 1,
                'how_we_use'    => __('These cookies are essential for websites built on Wordpress to perform their basic functions. These include those required to allow registered users to authenticate and perform account related functions.',
                                      CWIS_PLUGIN_SLUG),
                'cookies_used'  => esc_html('wordpress_test_cookie, wordpress_{hash}, wordpress_logged_in_{hash}, wp-settings-{user_id}, wp_sharing_{id}'),
            )
        );
    }

    /**
     * Register all of the hooks related to the admin area functionality.
     *
     * @since  4.1.9
     * @access public
     */
    public function define_admin_hooks()
    {
        // These defines all methods related to CWIS GDPR functionality.
        $cwis_gdpr_requests = $this->get_class_instance('Cwis_GDPR_Requests');
        $cwis_gdpr_requests_admin = $this->get_class_instance('Cwis_GDPR_Requests_Admin');
        $cwis_gdpr_email = $this->get_class_instance('Cwis_GDPR_Email');

        // GDPR settings
        $this->loader->add_action('admin_init', $this, 'register_settings');

        // CSS, JS and HTML elements
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_styles');
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_scripts');

        // Is GDPR enabled?
        if (get_option('CWIS_GDPR_ENABLED')) {

            // Notices displayed near the top of admin pages, should echo a message to be displayed.
            $this->loader->add_action('admin_notices', $this, 'privacy_policy_page_missing');
            $this->loader->add_action('admin_notices', $this, 'privacy_policy_updated_notice');

            // Fires and displays any extra BuddyPress member registration details fields.
            $this->loader->add_action('bp_account_details_fields', $this, 'consent_checkboxes');

            // Filters whether the Woocommerce user who generated the nonce is logged out.
            $this->loader->add_filter('nonce_user_logged_out', $this, 'woo_nonce_fix', 100, 2);

            // Adds consent checkboxes to the WooCommerce registration page and to the checkout registration form.
            $woo_add_to_registration = get_option('gdpr_add_consent_checkboxes_registration', false);
            if ($woo_add_to_registration) {
                $this->loader->add_action('woocommerce_register_form', $this, 'consent_checkboxes');
            }
            $woo_add_to_checkout = get_option('gdpr_add_consent_checkboxes_checkout', false);
            if ($woo_add_to_checkout) {
                $this->loader->add_action('woocommerce_checkout_update_user_meta', $this,
                                          'woocommerce_checkout_save_consent', 10, 2);
                $this->loader->add_filter('woocommerce_checkout_fields', $this, 'woocommerce_consent_checkboxes');
            }

            // Used to output new fields or data to the bottom of WordPress's user profile pages.
            $this->loader->add_action('show_user_profile', $this, 'edit_user_profile');

            // Used to save custom fields that have been added to the WordPress profile page.
            $this->loader->add_action('personal_options_update', $this, 'user_profile_update');

            // Ignores the privacy policy update. The update was probably just a typo fix.
            $this->loader->add_action('wp_ajax_ignore_privacy_policy_update', $this, 'ignore_privacy_policy_update');

            // Triggered whenever a page is published, or if it is edited and the status is changed to publish.
            $this->loader->add_action('publish_page', $this, 'privacy_policy_updated', 10, 2);

            // Removes the Privacy Policy consent from all users. On next login they will need to consent again.
            $this->loader->add_action('admin_post_seek_consent', $this, 'seek_consent');

            // User consent, audit logs and data breach requests
            $this->loader->add_action('register_form', $this, 'get_consent_checkboxes');
            $this->loader->add_action('registration_errors', $this, 'registration_errors', 10, 3);
            $this->loader->add_action('user_register', $this, 'save_user_consent_on_registration');
            $this->loader->add_action('wp_ajax_gdpr_audit_log', $this, 'audit_log');
            $this->loader->add_action('admin_post_gdpr_data_breach', $this, 'send_data_breach_confirmation_email');

            // GDPR requests
            $this->loader->add_action('admin_post_cwis_gdpr_export', $cwis_gdpr_requests_admin, 'export_data');
            $this->loader->add_action('admin_post_gdpr_delete_user', $cwis_gdpr_requests_admin, 'delete_user');
            $this->loader->add_action('admin_post_gdpr_cancel_request', $cwis_gdpr_requests_admin, 'cancel_request');
            $this->loader->add_action('admin_post_gdpr_add_to_deletion_requests', $cwis_gdpr_requests_admin,
                                      'add_to_deletion_requests');
            $this->loader->add_action('admin_post_gdpr_mark_resolved', $cwis_gdpr_requests_admin, 'mark_resolved');
            $this->loader->add_action('wp_ajax_gdpr_anonymize_comments', $cwis_gdpr_requests_admin, 'anonymize_comments');
            $this->loader->add_action('wp_ajax_gdpr_reassign_content', $cwis_gdpr_requests_admin, 'reassign_content');

            // CRON JOBS
            $this->loader->add_action('clean_gdpr_requests', $cwis_gdpr_requests, 'clean_requests');
            $this->loader->add_action('clean_gdpr_data_breach_request', $this, 'clean_data_breach_request', 10, 2);
            $this->loader->add_action('clean_gdpr_user_request_key', $cwis_gdpr_requests, 'clean_user_request_key', 10,
                                      2);
            $this->loader->add_action('send_data_breach_emails', $cwis_gdpr_email, 'send_data_breach_emails', 10, 2);
        }
    }

    /**
     * Register the function that contains the menu-building code for the admin area.
     *
     * @since   4.1.9
     * @access  public
     */
    public function enqueue_gdpr_settings_menu()
    {

        // Add a link to the "Plugin GDPR" settings
        $func_settings = array($this, 'display_gdpr_settings_page');
        add_options_page('WebDefender GDPR', 'WebDefender GDPR', 'administrator', 'cwis-gdpr', $func_settings);

        // Add a link to the main menu
        add_submenu_page('cwis-scanner', 'GDPR', 'GDPR', 'manage_options', 'cwis-gdpr', $func_settings);
    }

    /**
     * Register the JavaScript for the admin-facing side of the site.
     *
     * @since   4.1.9
     * @access  public
     * 
     * @param    string $hook
     */
    public function enqueue_scripts($hook)
    {
        // Enqueue scripts on plugin pages only
        if (false === strpos($hook, 'page_cwis-gdpr')) {
            return null;
        }

        // Note: wp_enqueue_script() introduced in WordPress 2.1.0
        wp_enqueue_script($this->get_plugin_name() . '-file', $this->plugin_assets_url . 'scripts/gdpr.js',
                          array('jquery', 'wp-util', 'jquery-ui-sortable'), $this->get_version(), false);
    }

    /**
     * Register the stylesheets for the admin-facing side of the site.
     *
     * @since   4.1.9
     * @access  public
     * 
     * @param    string $hook
     */
    public function enqueue_styles($hook)
    {
        // Enqueue styles on plugin pages only
        if (false === strpos($hook, 'page_cwis-gdpr')) {
            return null;
        }

        // Note: wp_enqueue_style() introduced in WordPress 2.6.0
        wp_enqueue_style($this->get_plugin_name() . '-file', $this->plugin_assets_url . 'styles/gdpr.css', array(),
                         $this->get_version(), 'all');
    }

    /**
     * Creates the HTML output for the GDPR tools page (screen) displayed.
     * Page link: wp-admin/options-general.php?page=cwis-gdpr
     *
     * @since   4.1.9
     */
    public function display_gdpr_settings_page()
    {
        if (!current_user_can('manage_options')) {
            $message = esc_html__('You do not have sufficient permissions to access this page.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        require_once CWIS_PLUGIN_DIR_PATH . 'admin/partials/gdpr/tools-page.php';
    }

    // --- SETTINGS ---

    /**
     * Register the GDPR-related settings.
     * 
     * @since   4.1.9
     * @access  public
     */
    public function register_settings()
    {
        $settings = array(
            'gdpr_privacy_policy_page'                 => 'intval',
            'gdpr_cookie_banner_content'               => array($this, 'sanitize_with_links'),
            'gdpr_cookie_privacy_excerpt'              => 'sanitize_textarea_field',
            'gdpr_cookie_popup_content'                => array($this, 'sanitize_cookie_tabs'),
            'gdpr_email_limit'                         => 'intval',
            'gdpr_deletion_needs_review'               => 'boolval',
            'gdpr_consent_types'                       => array($this, 'sanitize_consents'),
            'gdpr_add_consent_checkboxes_registration' => 'boolval',
            'gdpr_add_consent_checkboxes_checkout'     => 'boolval',
        );
        foreach ($settings as $option_name => $sanitize_callback) {
            register_setting('cwis-gdpr', $option_name, array('sanitize_callback' => $sanitize_callback));
        }
    }

    /**
     * Sanitize content but allow links.
     * 
     * @since   4.1.9
     * @access  public
     * @author  Fernando Claussen <fernandoclaussen@gmail.com>
     * 
     * @param   string $string
     * @return  string
     */
    public function sanitize_with_links($string)
    {
        return wp_kses($string, $this->allowed_html);
    }

    /**
     * Sanitizing user input on the cookie tabs.
     * 
     * @since   4.1.9
     * @author  Fernando Claussen <fernandoclaussen@gmail.com>
     * 
     * @param   array $tabs
     * @return  array
     */
    public function sanitize_cookie_tabs($tabs)
    {

        $output = array();
        if (!is_array($tabs)) {
            return array();
        }

        foreach ($tabs as $key => $props) {
            if ('' === $props['name'] || '' === $props['how_we_use']) {
                unset($tabs[$key]);
                continue;
            }
            $output[$key] = array(
                'name'          => sanitize_text_field(wp_unslash($props['name'])),
                'always_active' => isset($props['always_active']) ? boolval($props['always_active']) : 0,
                'how_we_use'    => wp_kses_post($props['how_we_use']),
                'cookies_used'  => sanitize_text_field(wp_unslash($props['cookies_used'])),
            );

            if (isset($props['hosts'])) {
                foreach ($props['hosts'] as $host_key => $host) {
                    if (empty($host['name']) || empty($host['cookies_used']) || empty($host['cookies_used'])) {
                        unset($props['hosts'][$host_key]);
                        continue;
                    }
                    $output[$key]['hosts'][$host_key] = array(
                        'name'         => sanitize_text_field(wp_unslash($host['name'])),
                        'cookies_used' => sanitize_text_field(wp_unslash($host['cookies_used'])),
                        'optout'       => esc_url_raw($host['optout']),
                    );
                }
            }
        }
        return $output;
    }

    /**
     * Sanitize the consents option when saving.
     * 
     * @since   4.1.9
     * @access  public
     * @author  Fernando Claussen <fernandoclaussen@gmail.com>
     * 
     * @param   array $consents
     * @return  array
     */
    public function sanitize_consents($consents)
    {
        $output = array();
        if (!is_array($consents)) {
            return $consents;
        }

        foreach ($consents as $key => $props) {
            if ('' === $props['name'] || '' === $props['description']) {
                unset($consents[$key]);
                continue;
            }
            $output[$key] = array(
                'name'         => sanitize_text_field(wp_unslash($props['name'])),
                'required'     => isset($props['required']) ? boolval($props['required']) : 0,
                'description'  => wp_kses(wp_unslash($props['description']), $this->allowed_html),
                'registration' => wp_kses(wp_unslash($props['registration']), $this->allowed_html),
            );
        }
        return $output;
    }

    // --- WOO ---

    /**
     * Fixes nonce manipulation made by Woocommerce.
     * 
     * @param   int $user_id The user id.
     * @param   string $action  The nonce Action.
     * @return  int          The user id.
     */
    public function woo_nonce_fix($user_id, $action)
    {
        if (( 0 !== $user_id ) && $action && ( false !== strpos($action, 'gdpr-') )) {
            $user_id = 0;
        }

        return $user_id;
    }

    // --- CONSENT ---

    /**
     * Returns the consent checkboxes to be used across the site.
     * 
     * @since   4.1.9
     * @access  public
     */
    public function get_consent_checkboxes()
    {
        $consent_types = get_option('gdpr_consent_types', array());
        $sent_extras = ( isset($_POST['user_consents']) ) ? $_POST['user_consents'] : array();
        if (empty($consent_types)) {
            $consent_types = $this->default_consent_types;
        }

        ob_start();
        foreach ($consent_types as $key => $consent) {
            $required = ( isset($consent['required']) && $consent['required'] ) ? 'required' : '';
            $checked = ( isset($sent_extras[$key]) ) ? checked($sent_extras[$key], 1, false) : '';
            echo '<p>' .
            '<input type="checkbox" name="user_consents[' . esc_attr($key) . ']" id="' . esc_attr($key) . '-consent" value="1" ' . $required . ' ' . $checked . '>' .
            '<label for="' . esc_attr($key) . '-consent">' . wp_kses($consent['registration'], $this->allowed_html) . '</label>' .
            '</p>';
        }

        return ob_get_clean();
    }

    /**
     * Saves the extra fields on a successful registration.
     * 
     * @since   4.1.9
     * @param   int $user_id
     */
    public function save_user_consent_on_registration($user_id)
    {
        Cwis_GDPR_Auditlog::log($user_id, esc_html__('User registered to the site.', CWIS_PLUGIN_SLUG));

        if (isset($_POST['user_consents'])) {
            $consents = array_map('sanitize_text_field', array_keys($_POST['user_consents']));
            foreach ($consents as $consent) {
                /* translators: Name of consent */
                Cwis_GDPR_Auditlog::log($user_id,
                                        sprintf(esc_html__('User gave explicit consent to %s', CWIS_PLUGIN_SLUG),
                                                           $consent));
                add_user_meta($user_id, 'gdpr_consents', $consent);
            }
            setcookie("gdpr[consent_types]", json_encode($consents), time() + YEAR_IN_SECONDS, "/");
        }
    }

    // --- OTHER ---

    /**
     * The audit-log for the audit log email lookup.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function audit_log()
    {
        if (!isset($_POST['nonce'], $_POST['email']) || !wp_verify_nonce(sanitize_key(wp_unslash($_POST['nonce'])),
                                                                                                 'gdpr-audit-log')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $email = sanitize_email($_POST['email']);
        $token = null;

        if (isset($_POST['token'])) {
            $token = sanitize_text_field(wp_unslash($_POST['token']));
        }

        $log = Cwis_GDPR_Auditlog::get_log($email, $token);

        if (!$log) {
            $message = esc_html__('No logs found for this email.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        wp_send_json_success($log);
    }

    /**
     * Admin notice when the user haven't picked a privacy policy page.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function privacy_policy_page_missing()
    {
        $privacy_page = get_option('gdpr_privacy_policy_page', '');
        if (!empty($privacy_page)) {
            return;
        }
        ?>
        <div class="notice notice-error is-dismissible">
            <p>
                <strong><?php echo esc_html__('[GDPR] You must select a Privacy Policy Page.', CWIS_PLUGIN_SLUG); ?></strong>
            </p>
            <p>
                <a class="button button-primary"
                   href="<?php echo esc_url(admin_url('admin.php?page=cwis-gdpr#cwis-gdpr-privacy-tab')) ?>"><?php
                       esc_html_e('Select your Privacy Policy page', CWIS_PLUGIN_SLUG);
                       ?></a>
            </p>
        </div>
        <?php
    }

    /**
     * Admin notice when the privacy policy has been updated.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function privacy_policy_updated_notice()
    {
        $updated = get_option('gdpr_privacy_policy_updated');
        if (!$updated) {
            return;
        }
        ?>
        <div class="notice notice-error privacy-page-updated-notice is-dismissible">
            <p>
                <strong><?php
                    echo esc_html__('Your Privacy Policy have been updated. In case this was not a small typo fix, you must ask users for explicit consent again.',
                                    CWIS_PLUGIN_SLUG);
                    ?></strong>
            </p>
            <form action="<?php echo esc_url(admin_url('admin-post.php')); ?>" method="post">
                <?php wp_nonce_field('gdpr-seek_consent', 'privacy-policy-updated-nonce'); ?>
                <input type="hidden" name="action" value="seek_consent">
                <p>
                    <?php
                    submit_button(esc_html__('Ask for consent', CWIS_PLUGIN_SLUG), 'primary', 'submit', false);
                    ?>
                </p>
            </form>
            <form action="<?php echo esc_url(admin_url('admin-post.php')); ?>" method="post" class="frm-ignore-privacy-update">
                <?php wp_nonce_field('gdpr-ignore_update', 'privacy-policy-ignore-update-nonce'); ?>
                <input type="hidden" name="action" value="ignore_privacy_policy_update">
                <p>
                    <?php
                    submit_button(esc_html__('Ignore', CWIS_PLUGIN_SLUG), 'secondary', 'submit', false);
                    ?>
                </p>
            </form>
        </div>
        <?php
    }

    /**
     * Sends a confirmation email to the admin email address before continuing with the data breach notification.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function send_data_breach_confirmation_email()
    {
        if (!isset($_POST['gdpr_data_breach_nonce']) || !wp_verify_nonce(sanitize_key($_POST['gdpr_data_breach_nonce']),
                                                                                      'gdpr-data-breach')) {
            $message = esc_html__('We could not verify the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        if (
                !isset(
                        $_POST['gdpr-data-breach-email-content'], $_POST['gdpr-data-breach-nature'],
                        $_POST['gdpr-name-contact-details-protection-officer'], $_POST['gdpr-likely-consequences'],
                        $_POST['gdpr-measures-taken']
                )
        ) {
            $message = esc_html__('One or more required fields are missing. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $email = get_bloginfo('admin_email');
        $user = wp_get_current_user();
        $content = sanitize_textarea_field(wp_unslash($_POST['gdpr-data-breach-email-content']));
        $nature = sanitize_textarea_field(wp_unslash($_POST['gdpr-data-breach-nature']));
        $office_contact = sanitize_textarea_field(wp_unslash($_POST['gdpr-name-contact-details-protection-officer']));
        $consequences = sanitize_textarea_field(wp_unslash($_POST['gdpr-likely-consequences']));
        $measures = sanitize_textarea_field(wp_unslash($_POST['gdpr-measures-taken']));

        $key = wp_generate_password(20, false);
        update_option('gdpr_data_breach_initiated',
                      array(
            'key'            => $key,
            'content'        => $content,
            'nature'         => $nature,
            'office_contact' => $office_contact,
            'consequences'   => $consequences,
            'measures'       => $measures
        ));

        $confirm_url = add_query_arg(
                array(
            'type' => 'data-breach-confirmed',
            'key'  => $key
                ), get_home_url() . wp_get_referer() . '#data-breach'
        );

        $this->get_class_instance('Cwis_GDPR_Email');
        Cwis_GDPR_Email::send(
                $email, 'data-breach-request',
                array(
            'requester'      => $user->user_email,
            'nature'         => $nature,
            'office_contact' => $office_contact,
            'consequences'   => $consequences,
            'measures'       => $measures,
            'confirm_url'    => $confirm_url,
                )
        );

        if ($time = wp_next_scheduled('clean_gdpr_data_breach_request')) {
            wp_unschedule_event($time, 'clean_gdpr_data_breach_request');
        }
        wp_schedule_single_event(time() + 2 * DAY_IN_SECONDS, 'clean_gdpr_data_breach_request');

        add_settings_error('cwis-gdpr', 'resolved',
                           esc_html__('Data breach notification has been initialized. An email confirmation has been sent to the website controller.',
                                      CWIS_PLUGIN_SLUG), 'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array(
            'settings-updated' => true
                                ), wp_get_referer() . '#data-breach'
                        )
                )
        );
        exit;
    }

    /**
     * CRON Job runs this after a couple days to cancel the data breach request.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function clean_data_breach_request()
    {
        delete_option('gdpr_data_breach_initiated');
    }

    /**
     * CRON job runs this to clean up the telemetry post type every 12 hours.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function telemetry_cleanup()
    {
        $args = array(
            'post_type'      => 'telemetry',
            'posts_per_page' => -1,
            'fields'         => 'ids',
        );

        $telemetry_posts = get_posts($args);

        foreach ($telemetry_posts as $post) {
            wp_delete_post($post, true);
        }
    }

    /**
     * Sanitizes the consents during wordpress registration.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  WP_Error $errors             The error object.
     * @param  string $sanitized_user_login The user login.
     * @param  string $user_email           The user email.
     * @return WP_Error                     WP_Error object with added errors or not.
     */
    public function registration_errors($errors, $sanitized_user_login, $user_email)
    {
        $consent_types = get_option('gdpr_consent_types', array());
        if (empty($consent_types)) {
            return $errors;
        }

        foreach ($consent_types as $key => $consent) {
            if ($consent['required']) {
                if (!isset($_POST['user_consents'][$key])) {
                    $errors->add('missing_required_consents',
                                 sprintf(
                                    '<strong>%s</strong>: %s %s.', __('ERROR', CWIS_PLUGIN_SLUG), $consent['name'],
                                                                      __('is a required consent', CWIS_PLUGIN_SLUG)
                    ));
                }
            }
        }
        return $errors;
    }

    /**
     * Remove the Privacy Policy consent from all users. On next login they will need to consent again.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function seek_consent()
    {
        if (!isset($_POST['privacy-policy-updated-nonce']) || !wp_verify_nonce(sanitize_key($_POST['privacy-policy-updated-nonce']),
                                                                                            'gdpr-seek_consent')) {
            $message = esc_html__('We could not verify the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        delete_option('gdpr_privacy_policy_updated');

        $users = get_users(array(
            'fields' => 'all_with_meta'
        ));

        foreach ($users as $user) {
            $usermeta = get_user_meta($user->ID, 'gdpr_consents');
            if (in_array('privacy-policy', $usermeta)) {
                Cwis_GDPR_Auditlog::log($user->ID,
                                        esc_html__('Privacy Policy has been updated. Removing the Privacy Policy consent and requesting new consent.',
                                                   CWIS_PLUGIN_SLUG));
                delete_user_meta($user->ID, 'gdpr_consents', 'privacy-policy');
            }
        }

        add_settings_error('cwis-gdpr', 'resolved',
                           esc_html__('Users will have to consent to the updated privacy policy on login.',
                                      CWIS_PLUGIN_SLUG), 'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array(
            'settings-updated' => true
                                ), wp_get_referer()
                        )
                )
        );
        exit;
    }

    /**
     * Check if the privacy policy page content has been updated or not.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  int     $ID   The page ID.
     * @param  WP_Post $post The post object.
     */
    public function privacy_policy_updated($ID, $post)
    {
        $privacy_page = (int) get_option('gdpr_privacy_policy_page', 0);
        $ID = (int) $ID;
        if ($ID === $privacy_page) {
            $revisions = wp_get_post_revisions($ID);
            $revisions = array_filter($revisions,
                                      function( $rev ) {
                return strpos($rev->post_name, 'autosave') === false;
            });

            reset($revisions);
            if (current($revisions)->post_content !== $post->post_content) {
                update_option('gdpr_privacy_policy_updated', 1);
            }
        }
    }

    /**
     * Ignore the privacy policy update. The update was probably just a typo fix.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function ignore_privacy_policy_update()
    {
        if (!isset($_POST['nonce']) || !wp_verify_nonce(sanitize_key($_POST['nonce']), 'gdpr-ignore_update')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        delete_option('gdpr_privacy_policy_updated');
        wp_send_json_success();
    }

    /**
     * Add consent checkboxes to the user profile on wp dashboard.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  WP_User $user The user object.
     */
    public function edit_user_profile($user)
    {
        $consent_types = get_option('gdpr_consent_types', array());
        $user_consents = get_user_meta($user->ID, 'gdpr_consents');
        if (empty($consent_types)) {
            return;
        }
        ?>
        <h3><?php _e('Consent Management', CWIS_PLUGIN_SLUG); ?></h3>

        <table class="form-table">
            <?php foreach ($consent_types as $consent_key => $consent): ?>
                <tr>
                    <th>
                        <label><?php echo esc_html($consent['name']); ?></label>
                    </th>
                    <td>
                        <?php if ($consent['required']): ?>
                            <input type="checkbox" name="user_consents[]" value="<?php echo esc_attr($consent_key); ?>" disabled checked>
                            <input type="hidden" name="user_consents[]" value="<?php echo esc_attr($consent_key); ?>">
                        <?php else: ?>
                            <input type="checkbox" name="user_consents[]" value="<?php echo esc_attr($consent_key); ?>" <?php
                            echo!empty($user_consents) ? checked(in_array($consent_key, $user_consents, true), 1, false) : '';
                            ?>>
                               <?php endif ?>
                        <span class="description"><?php echo wp_kses($consent['description'], $this->allowed_html); ?></span>
                    </td>
                </tr>
            <?php endforeach ?>
        </table>

        <?php
    }

    /**
     * Save the user consent preferences when he update his profile on wp dashboard.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  int $user_id The user ID.
     */
    public function user_profile_update($user_id)
    {
        if (!isset($_POST['user_consents'])) {
            return;
        }

        $consents = array_map('sanitize_text_field', (array) $_POST['user_consents']);

        Cwis_GDPR_Auditlog::log($user_id,
                                esc_html__('Profile Updated. These are the user consents after the save:',
                                           CWIS_PLUGIN_SLUG));

        delete_user_meta($user_id, 'gdpr_consents');

        foreach ((array) $consents as $consent) {
            $consent = sanitize_text_field(wp_unslash($consent));
            add_user_meta($user_id, 'gdpr_consents', $consent);
            Cwis_GDPR_Auditlog::log($user_id, $consent);
        }

        setcookie("gdpr[consent_types]", json_encode($consents), time() + YEAR_IN_SECONDS, "/");
    }

    /**
     * Add the consent checkboxes to the checkout page.
     * @since  1.3.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  int $fields The checkout fields.
     */
    public function woocommerce_consent_checkboxes($fields)
    {
        $consent_types = get_option('gdpr_consent_types', array());
        if (empty($consent_types)) {
            $consent_types = $this->default_consent_types;
        }

        foreach ($consent_types as $key => $consent) {
            $required = ( isset($consent['required']) && $consent['required'] ) ? 'required' : '';

            $fields['account']['user_consents_' . esc_attr($key)] = array(
                'type'     => 'checkbox',
                'label'    => wp_kses($consent['registration'], $this->allowed_html),
                'required' => $required,
            );
        }
        return $fields;
    }

    /**
     * Save the user consent when registering from the checkout page.
     * @since  1.3.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  int $customer_id The user ID.
     * @param  array $data All data submitted during checkout.
     */
    public function woocommerce_checkout_save_consent($customer_id, $data)
    {
        $data = array_filter($data);
        $consent_arr = array_filter(array_keys($data),
                                               function( $item ) {
            return false !== strpos($item, 'user_consents_');
        });

        foreach ($consent_arr as $key => $value) {
            $consent = str_replace('user_consents_', '', $value);
            add_user_meta($customer_id, 'gdpr_consents', $consent);
        }
    }

}
