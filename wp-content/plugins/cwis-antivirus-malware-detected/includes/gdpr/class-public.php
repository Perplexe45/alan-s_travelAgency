<?php

/**
 * The public-specific functionality of the plugin.
 * 
 * Defines the plugin name, version, and hooks.
 *
 * @link       https://cobweb-security.com
 * @since      4.1.9
 *
 * @package    Cwis
 * @subpackage Cwis/includes/gdpr
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_GDPR_Public extends Cwis_Core_Foundation
{

    private $allowed_html = array(
        'a' => array(
            'href'   => true,
            'title'  => true,
            'target' => true,
        ),
    );
    private $default_consent_types;
    private $plugin_assets_url;

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
        $this->get_class_instance('Cwis_GDPR_Auditlog');
        $this->plugin_assets_url = plugin_dir_url(CWIS_PLUGIN_DIR_PATH . 'public/index.php');
        $this->default_consent_types = array(
            'privacy-policy' => array(
                'name'         => 'Privacy Policy',
                'required'     => 1,
                'description'  => sprintf(__('You read and agreed to our %s.', CWIS_PLUGIN_SLUG),
                                             '<a href="" target="_blank">' . esc_html('Privacy Policy', CWIS_PLUGIN_SLUG) . '</a>'),
                'registration' => sprintf(__('You read and agreed to our %s.', CWIS_PLUGIN_SLUG),
                                             '<a href="" target="_blank">' . esc_html('Privacy Policy', CWIS_PLUGIN_SLUG) . '</a>'),
            )
        );
    }

    /**
     * Register all of the hooks related to the public area functionality.
     *
     * @since   4.1.9
     * @access  public
     */
    public function define_public_hooks()
    {
        // Is GDPR enabled?
        if (get_option('CWIS_GDPR_ENABLED')) {

            // CSS, JS and HTML elements
            $this->loader->add_action('wp_enqueue_scripts', $this, 'enqueue_styles');
            $this->loader->add_action('wp_enqueue_scripts', $this, 'enqueue_scripts');
            $this->loader->add_action('init', $this, 'set_plugin_cookies');
            $this->loader->add_action('wp_footer', $this, 'overlay');
            $this->loader->add_action('wp_footer', $this, 'privacy_bar');
            $this->loader->add_action('wp_footer', $this, 'is_consent_needed');
            $this->loader->add_action('wp_footer', $this, 'privacy_preferences_modal');
            $this->loader->add_action('wp_footer', $this, 'confirmation_screens');

            // Privacy Policy
            $this->loader->add_action('wp_ajax_disagree_with_terms', $this, 'logout');
            $this->loader->add_action('wp_ajax_agree_with_terms', $this, 'agree_with_terms');
            $this->loader->add_action('admin_post_gdpr_update_privacy_preferences', $this, 'update_privacy_preferences');
            $this->loader->add_action('admin_post_nopriv_gdpr_update_privacy_preferences', $this,
                                      'update_privacy_preferences');

            // GDPR requests
            $requests_public = $this->get_class_instance('Cwis_GDPR_Requests_Public');
            $this->loader->add_action('wp', $requests_public, 'request_confirmed');
            $this->loader->add_action('admin_post_gdpr_send_request_email', $requests_public, 'send_request_email');
            $this->loader->add_action('admin_post_nopriv_gdpr_send_request_email', $requests_public,
                                      'send_request_email');
        }
    }

    /**
     * Register the JavaScript for the public-facing side of the site.
     *
     * @since   4.1.9
     * @access  public
     */
    public function enqueue_scripts()
    {
        // Note: wp_enqueue_script() introduced in WordPress 2.1.0
        wp_enqueue_script($this->get_plugin_name() . '-file', $this->plugin_assets_url . 'scripts/gdpr.js',
                          array('jquery'), $this->get_version(), 'all');

        // Localizes CWIS core script (by the last handle used)
        $settings = array(
            'ajaxurl'           => admin_url('admin-ajax.php'),
            'aborting'          => esc_html__('Aborting', CWIS_PLUGIN_SLUG),
            'is_user_logged_in' => is_user_logged_in(),
            'privacy_page_id'   => get_option('gdpr_privacy_policy_page', 0)
        );
        wp_localize_script($this->get_plugin_name() . '-file', 'GDPR', $settings);
    }

    /**
     * Register the stylesheets for the public-facing side of the site.
     *
     * @since   4.1.9
     * @access  public
     */
    public function enqueue_styles()
    {
        // Note: wp_enqueue_style() introduced in WordPress 2.6.0
        wp_enqueue_style($this->get_plugin_name() . '-file', $this->plugin_assets_url . 'styles/gdpr.css', array(),
                         $this->get_version(), 'all');
    }

    // --- OTHER ---

    /**
     * Checks in an array if a value is found using LIKE instead of =.
     * @since  1.4.3
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @return Bool
     */
    public function similar_in_array($needle, $haystack)
    {
        foreach ($haystack as $value) {
            if (stripos(strtolower($value), strtolower($needle)) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * Prints the privacy bar for the end user to save the consent and cookie settings.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function privacy_bar()
    {
        $content = get_option('gdpr_cookie_banner_content', '');
        $tabs = get_option('gdpr_cookie_popup_content', array());
        $button_text = apply_filters('gdpr_privacy_bar_button_text', esc_html__('I Agree', CWIS_PLUGIN_SLUG));

        if (empty($content)) {
            return;
        }

        require_once CWIS_PLUGIN_DIR_PATH . 'public/partials/privacy-bar.php';
    }

    /**
     * The privacy preferences modal.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function privacy_preferences_modal()
    {
        $cookie_privacy_excerpt = get_option('gdpr_cookie_privacy_excerpt', '');
        $consent_types = get_option('gdpr_consent_types', array());
        if (empty($consent_types)) {
            $consent_types = $this->default_consent_types;
        }
        $privacy_policy_page = get_option('gdpr_privacy_policy_page', 0);
        $approved_cookies = isset($_COOKIE['gdpr']['allowed_cookies']) ? json_decode(wp_unslash($_COOKIE['gdpr']['allowed_cookies'])) : array();
        $user_consents = isset($_COOKIE['gdpr']['consent_types']) ? json_decode(wp_unslash($_COOKIE['gdpr']['consent_types'])) : array();
        $tabs = get_option('gdpr_cookie_popup_content', array());

        require_once CWIS_PLUGIN_DIR_PATH . 'public/partials/privacy-preferences-modal.php';
    }

    /**
     * The black overlay for the plugin modals.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function overlay()
    {
        echo '<div class="gdpr-overlay"></div>';
    }

    /**
     * Prints the confirmation dialogs.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function confirmation_screens()
    {
        require_once CWIS_PLUGIN_DIR_PATH . 'public/partials/confirmation-screens.php';
    }

    /**
     * Update the user allowed cookies and types of consent.
     * If the user is logged in, we also save consent to user meta.
     * @since  1.1.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function update_privacy_preferences()
    {
        if (!isset($_POST['update-privacy-preferences-nonce']) ||
                !wp_verify_nonce(sanitize_key($_POST['update-privacy-preferences-nonce']),
                                              'gdpr-update_privacy_preferences')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        if (!isset($_POST['user_consents'])) {
            $message = esc_html__('You need to at least consent to our Privacy Policy.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $consents = array_map('sanitize_text_field', (array) $_POST['user_consents']);
        $cookies = isset($_POST['approved_cookies']) ? array_map('sanitize_text_field',
                                                                 (array) $_POST['approved_cookies']) : array();
        $all_cookies = isset($_POST['all_cookies']) ? array_map('sanitize_text_field',
                                                                (array) json_decode(wp_unslash($_POST['all_cookies']))) : array();

        $approved_cookies = array();
        if (!empty($cookies)) {
            foreach ($cookies as $cookieArr) {
                $cookieArr = json_decode(wp_unslash($cookieArr));
                foreach ($cookieArr as $cookie) {
                    $approved_cookies[] = $cookie;
                }
            }
        }

        $cookies_to_remove = array_diff($all_cookies, $approved_cookies);

        $cookies_as_json = json_encode($approved_cookies);
        $consents_as_json = json_encode($consents);

        setcookie("gdpr[allowed_cookies]", $cookies_as_json, time() + YEAR_IN_SECONDS, "/");
        setcookie("gdpr[consent_types]", $consents_as_json, time() + YEAR_IN_SECONDS, "/");

        if (!empty($_COOKIE)) {
            foreach ($cookies_to_remove as $cookie) {
                if ($this->similar_in_array($cookie, array_keys($_COOKIE))) {
                    $domain = get_site_url();
                    $domain = wp_parse_url($domain, PHP_URL_HOST);
                    unset($_COOKIE[$cookie]);
                    setcookie($cookie, NULL, -1, "/", $domain);
                    setcookie($cookie, NULL, -1, "/", '.' . $domain);
                }
            }
        }

        if (is_user_logged_in()) {
            $user = wp_get_current_user();
            Cwis_GDPR_Auditlog::log($user->ID,
                                    esc_html__('User updated their privacy preferences. These are the new approved cookies and consent preferences:',
                                               CWIS_PLUGIN_SLUG));
            if (!empty($consents)) {
                delete_user_meta($user->ID, 'gdpr_consents');
                foreach ($consents as $consent) {
                    $consent = sanitize_text_field(wp_unslash($consent));
                    add_user_meta($user->ID, 'gdpr_consents', $consent);
                    Cwis_GDPR_Auditlog::log($user->ID, 'Consent: ' . $consent);
                }
            }

            if (!empty($approved_cookies)) {
                foreach ($approved_cookies as $cookie) {
                    Cwis_GDPR_Auditlog::log($user->ID, 'Cookie: ' . $cookie);
                }
            }
        }

        wp_safe_redirect(esc_url_raw(wp_get_referer()));
        exit;
    }

    /**
     * Check if the user did not consent to the privacy policy
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @return bool     Whether the user consented or not.
     */
    public function is_consent_needed()
    {
        $privacy_policy_page = get_option('gdpr_privacy_policy_page');
        if (!$privacy_policy_page || !is_user_logged_in()) {
            return;
        }

        //$page_obj = get_post($privacy_policy_page);
        $user = wp_get_current_user();
        $user_consents = get_user_meta($user->ID, 'gdpr_consents');

        if (in_array('privacy-policy', $user_consents)) {
            return;
        }

        require_once CWIS_PLUGIN_DIR_PATH . 'public/partials/reconsent-modal.php';
    }

    /**
     * Log the user out if they does not agree with the privacy policy terms when prompted.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function logout()
    {
        if (!wp_verify_nonce(sanitize_text_field(wp_unslash($_POST['nonce'])), 'gdpr-user_disagree_with_terms')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        wp_logout();
        wp_send_json_success();
    }

    /**
     * The user agreed with the privacy policy terms when prompted.
     * 
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function agree_with_terms()
    {
        if (!wp_verify_nonce(sanitize_text_field(wp_unslash($_POST['nonce'])), 'gdpr-user_agree_with_terms')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $user = wp_get_current_user();
        $user_consents = get_user_meta($user->ID, 'gdpr_consents');
        $user_consents[] = 'privacy-policy';
        $user_consents = array_unique($user_consents);
        add_user_meta($user->ID, 'gdpr_consents', 'privacy-policy');

        setcookie("gdpr[consent_types]", json_encode($user_consents), time() + YEAR_IN_SECONDS, "/");
        Cwis_GDPR_Auditlog::log($user->ID, esc_html__('User consented to the Privacy Policies.', CWIS_PLUGIN_SLUG));
        wp_send_json_success();
    }

    public function set_plugin_cookies()
    {
        $user_id = get_current_user_id();

        if (!isset($_COOKIE['gdpr']['consent_types'])) {
            if (!$user_id) {
                setcookie('gdpr[consent_types]', '[]', time() + YEAR_IN_SECONDS, "/");
            } else {
                $user_consents = get_user_meta($user_id, 'gdpr_consents');
                setcookie("gdpr[consent_types]", json_encode($user_consents), time() + YEAR_IN_SECONDS, "/");
            }
        } else {
            if ($user_id) {
                $user_consents = (array) get_user_meta($user_id, 'gdpr_consents');
                $cookie_consents = (array) json_decode(wp_unslash($_COOKIE['gdpr']['consent_types']));

                $intersect = array_intersect($user_consents, $cookie_consents);
                $diff = array_merge(array_diff($user_consents, $intersect), array_diff($cookie_consents, $intersect));

                if (!empty($diff)) {
                    setcookie("gdpr[consent_types]", json_encode($user_consents), time() + YEAR_IN_SECONDS, "/");
                }
            }
        }


        if (!isset($_COOKIE['gdpr']['allowed_cookies'])) {
            $registered_cookies = get_option('gdpr_cookie_popup_content', array());
            $cookies = array();
            if (!empty($registered_cookies)) {
                $required_cookies = array_filter($registered_cookies,
                                                 function( $item ) {
                    return $item['always_active'] == 1;
                });
                if (!empty($required_cookies)) {
                    foreach ($required_cookies as $category) {
                        $cookies_used = explode(',', $category['cookies_used']);
                        foreach ($cookies_used as $cookie) {
                            $cookies[] = trim($cookie);
                        }
                    }
                }
            }

            if (!empty($cookies)) {
                setcookie("gdpr[allowed_cookies]", json_encode($cookies), time() + YEAR_IN_SECONDS, "/");
            } else {
                setcookie("gdpr[allowed_cookies]", '[]', time() + YEAR_IN_SECONDS, "/");
            }
        }
    }

}
