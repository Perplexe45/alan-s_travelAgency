<?php

/**
 * The GDPR-requests-
 * specific functionality of the plugin.
 * 
 * @link       https://cobweb-security.com
 * @since      4.1.9
 *
 * @package    Cwis
 * @subpackage Cwis/includes/gdpr
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_GDPR_Requests extends Cwis_Core_Foundation
{

    // Keys to remove from user metadata
    protected $diff_user_meta = array(
        'admin_color', 'comment_shortcuts', 'description', 'dismissed_wp_pointers', 'first_name', 'last_name', 'nickname',
        'rich_editing', 'show_admin_bar_front', 'syntax_highlighting', 'use_ssl', 'wp_capabilities', 'wp_user_level'
    );
    //
    // Valid request statuses
    protected $request_statuses = array('canceled', 'confirmed', 'deleted', 'expired', 'pending');
    //
    // Valid request types
    protected $request_types = array('access', 'complaint', 'delete', 'rectify');
    //
    // Request validity period in seconds (3 days by default)
    protected $request_validity = 259200;

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
    }

    // --- REQUESTS ---

    /**
     * Adds a user to the request list.
     * 
     * @since   4.1.9
     * @access  public
     * 
     * @param   string $email   Valid user email
     * @param   string $type    Request type, "access" by default.
     * @param   string $data    Complaint and rectify data, optional.
     * @param   string $status  Request status, "pending" by default.
     * @return  bool
     */
    public function add_request($email, $type = 'access', $data = null, $status = 'pending')
    {
        if (!($email = sanitize_email($email)) || !$this->is_valid_request_status($status) || !$this->is_valid_request_type($type)) {
            return false;
        }

        $requests = $this->all_requests();
        $requests[$email] = array(
            'data'   => sanitize_textarea_field(wp_unslash($data)),
            'status' => $status, //request status
            'type'   => $type, //request type
            'ts_c'   => time(), //created at
            'ts_u'   => time(), //updated at
        );

        update_option('CWIS_GDPR_REQUESTS', $requests);
        return true;
    }

    /**
     * This gets a complete request list as an array.
     * 
     * @since   4.1.9
     * @access  public
     * 
     * @return  array
     */
    public function all_requests()
    {
        return (array) get_option('CWIS_GDPR_REQUESTS', array());
    }

    /**
     * Returns a specific request by user email on NULL if not exists.
     * 
     * @since   4.1.9
     * @access  public
     * 
     * @param   string $email   Valid user email
     * @return  array|null
     */
    public function get_request($email)
    {
        $requests = $this->all_requests();
        return strlen($email) && isset($requests[$email]) ? $requests[$email] : null;
    }

    /**
     * Checks if a valid request status.
     * 
     * @since   4.1.9
     * @access  public
     *  
     * @param   string $status
     * @return  bool
     */
    public function is_valid_request_status($status)
    {
        return strlen($status) && in_array($status, $this->request_statuses);
    }

    /**
     * Checks if a valid request type.
     * 
     * @since   4.1.9
     * @access  public
     *  
     * @param   string $type
     * @return  bool
     */
    public function is_valid_request_type($type)
    {
        return strlen($type) && in_array($type, $this->request_types);
    }

    // --- EXPORT ---

    /**
     * Export the generated export file.
     * 
     * @since   4.1.9
     * @access  public
     */
    public function export_data()
    {
        $email = sanitize_email($this->filter_input_post('user_email'));
        $format = sanitize_text_field(wp_unslash($this->filter_input_post('cwis-gdpr-export-format')));
        $nonce = sanitize_key(wp_unslash($this->filter_input_post('cwis-gdpr-export-nonce')));
        if ($email && $format && wp_verify_nonce($nonce, 'cwis-gdpr-export')) {
            $this->generate_export($email, $format);
        }

        wp_send_json_error();
    }

    /**
     * Generates the export in JSON, PDF or XML formats.
     * 
     * @since   4.1.9
     * @access  public
     * 
     * @param   string $email   Valid user email
     * @param   string $format
     * @return  string
     */
    public function generate_export($email, $format)
    {
        if (null === ($user_content = $this->get_user_content($email))) {
            return null;
        }

        $comments = $user_content['comments'];
        $user = $user_content['user'];
        $user_meta = $user_content['user_meta'];

        switch (strtoupper($format)) {
            case 'JSON':
                $export_data = $this->get_export_data($email, $format);
                $export_filename = 'export-' . time() . '.json';

                @header('Content-Type: application/json; charset=' . get_option('blog_charset'));
                @header('Content-disposition: attachment; filename="' . $export_filename . '"'); //force download

                echo $export_data;
                die;

            case 'PDF':
                $export_data = $this->get_export_data($email, $format);
                $export_filename = 'export-' . time() . '.pdf';

                ob_end_clean();
                require_once CWIS_PLUGIN_DIR_PATH . 'vendor/tecnickcom/tcpdf/tcpdf.php';
                $pdf = $this->get_class_instance('Cwis_GDPR_TCPDF');
                $pdf->OutputExportData($export_data, $export_filename, $dest = 'D');
                die;

            case 'XML':
                $export_data = $this->get_export_data($email, $format);
                $export_filename = 'export-' . time() . '.xml';

                @header('Content-Type: text/xml; charset=' . get_option('blog_charset'));
                @header('Content-disposition: attachment; filename="' . $export_filename . '"'); //force download
                echo $export_data;
                die;
        }
    }

    /**
     * Generates the export in JSON, PDF or XML formats.
     * 
     * @since   4.2.0
     * @access  public
     * 
     * @param   string $email   Valid user email
     * @param   string $format
     * @return  string
     */
    public function get_export_data($email, $format)
    {
        if (null === ($user_content = $this->get_user_content($email))) {
            return null;
        }

        $comments = $user = $user_consents = $user_meta = null;
        extract($user_content);

        switch (strtoupper($format)) {
            case 'HTML':
            case 'PDF':
                ob_start();
                if (!empty($email)) {
                    if (!empty($user) && $user instanceof WP_User) {
                        echo '<h3>User Profile</h3>';
                        echo '<table class="widefat">
                  <tr>
                  <td class="row-title" width="180">Username</td>
                  <td>' . esc_html($user->user_login) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">First Name</td>
                  <td>' . esc_html($user->first_name) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Last Name</td>
                  <td>' . esc_html($user->last_name) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Email</td>
                  <td>' . esc_html($user->user_email) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Nickname</td>
                  <td>' . esc_html($user->nickname) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Biographical Info</td>
                  <td>' . esc_html($user->description) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Website</td>
                  <td>' . esc_url($user->user_url) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Registered</td>
                  <td>' . esc_html($user->user_registered) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Roles</td>
                  <td>' . esc_html(implode(', ', $user->roles)) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">Profile Picture</td>
                  <td><img src="' . get_avatar_url($user->ID, array('size' => 90)) . '" alt="' . esc_html($user->user_email) . '" /></td>
                  </tr>
                  </table>';
                    } else {
                        ?>
                        <div class="error">
                            <p>We could not find a user with that email.</p>
                        </div>
                        <?php
                    }
                }

                if (!empty($user_consents)) {
                    echo '<h3>' . esc_html__('Consent Given', CWIS_PLUGIN_SLUG) . '</h3>';
                    echo '<table class="widefat">
                  <thead>
                  <tr>
                  <th width="180">' . esc_html__('Consent ID', CWIS_PLUGIN_SLUG) . '</th>
                  </tr>
                  </thead>';
                    foreach ($user_consents as $v) {
                        echo '<tr>';
                        echo '<td class="row-title">' . esc_html($v) . '</td>';
                        echo '</tr>';
                    }
                    echo '</table>';
                }

                if (!empty($comments)) {
                    echo '<h3>' . esc_html__('Comments', CWIS_PLUGIN_SLUG) . '</h3>';
                    foreach ($comments as $v) {
                        echo '<table class="widefat">
                  <thead>
                  <tr>
                  <th class="row-title" width="180">' . esc_html__('Comment Field', CWIS_PLUGIN_SLUG) . '</th>
                  <th class="row-title">' . esc_html__('Comment Data', CWIS_PLUGIN_SLUG) . '</th>
                  </tr>
                  </thead>
                  <tr>
                  <td class="row-title">comment_author</td>
                  <td>' . esc_html($v->comment_author) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_author_email</td>
                  <td>' . esc_html($v->comment_author_email) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_author_url</td>
                  <td>' . esc_html($v->comment_author_url) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_author_IP</td>
                  <td>' . esc_html($v->comment_author_IP) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_date</td>
                  <td>' . esc_html($v->comment_date) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_agent</td>
                  <td>' . esc_html($v->comment_agent) . '</td>
                  </tr>
                  <tr>
                  <td class="row-title">comment_content</td>
                  <td>' . esc_html($v->comment_content) . '</td>
                  </tr>
                  </table><br>';
                    }
                }

                if (!empty($user_meta)) {
                    echo '<h3>' . esc_html__('Metadata', CWIS_PLUGIN_SLUG) . '</h3>';
                    echo '<table class="widefat">
                  <thead>
                  <tr>
                  <th width="180">' . esc_html__('Name', CWIS_PLUGIN_SLUG) . '</th>
                  <th>' . esc_html__('Value', CWIS_PLUGIN_SLUG) . '</th>
                  </tr>
                  </thead>';
                    foreach ($user_meta as $k => $v) {
                        echo '<tr>';
                        echo '<td class="row-title">' . esc_html($k) . '</td>';
                        echo '<td>';
                        foreach ($v as $value) {
                            if (is_serialized($value)) {

                                echo '<pre>' . print_r(maybe_unserialize($value), true) . '</pre><br />';
                            } else {
                                echo print_r($value, true) . '<br />';
                            }
                        }
                        echo '</td>';
                        echo '</tr>';
                    }
                    echo '</table>';
                }
                return ob_get_contents();

            case 'JSON':
                $metadata = array();
                foreach ($user_meta as $k => $v) {
                    $metadata[$k] = array();
                    foreach ($v as $value) {
                        if (is_serialized($value)) {
                            $metadata[$k][] = maybe_unserialize($value);
                        } else {
                            $metadata[$k] = $value;
                        }
                    }
                }

                $comments_array = array();
                if (!empty($comments)) {
                    foreach ($comments as $k => $v) {
                        $comments_array[$k] = array(
                            'comment_author'       => $v->comment_author,
                            'comment_author_email' => $v->comment_author_email,
                            'comment_author_url'   => $v->comment_author_url,
                            'comment_author_IP'    => $v->comment_author_IP,
                            'comment_date'         => $v->comment_date,
                            'comment_agent'        => $v->comment_agent,
                            'comment_content'      => $v->comment_content,
                        );
                    }
                }

                $json = array(
                    'Personal Information' => array(
                        'Username'     => $user->user_login,
                        'First Name'   => $user->first_name,
                        'Last Name'    => $user->last_name,
                        'Email'        => $user->user_email,
                        'Nickname'     => $user->nickname,
                        'Display Name' => $user->display_name,
                        'Description'  => $user->description,
                        'Website'      => $user->user_url,
                    ),
                    'Metadata'             => $metadata,
                    'Comments'             => $comments_array,
                );

                return wp_json_encode($json);

            case 'XML':
                $dom = new DomDocument('1.0', 'ISO-8859-1');
                $personal_info = $dom->createElement('personal_information');
                $dom->appendChild($personal_info);
                $personal_info->appendChild($dom->createElement('username', $user->user_login));
                $personal_info->appendChild($dom->createElement('first_name', $user->first_name));
                $personal_info->appendChild($dom->createElement('last_name', $user->last_name));
                $personal_info->appendChild($dom->createElement('email', $user->user_email));
                $personal_info->appendChild($dom->createElement('nickname', $user->nickname));
                $personal_info->appendChild($dom->createElement('display_name', $user->display_name));
                $personal_info->appendChild($dom->createElement('description', $user->description));
                $personal_info->appendChild($dom->createElement('website', $user->user_url));

                if (!empty($comments)) {
                    $comments_node = $dom->createElement('comments');
                    $dom->appendChild($comments_node);
                    foreach ($comments as $k => $v) {
                        $single_comment = $dom->createElement('comment');
                        $comments_node->appendChild($single_comment);
                        $single_comment->appendChild($dom->createElement('comment_author',
                                                                         htmlspecialchars($v->comment_author)));
                        $single_comment->appendChild($dom->createElement('comment_author_email',
                                                                         htmlspecialchars($v->comment_author_email)));
                        $single_comment->appendChild($dom->createElement('comment_author_url',
                                                                         htmlspecialchars($v->comment_author_url)));
                        $single_comment->appendChild($dom->createElement('comment_author_IP',
                                                                         htmlspecialchars($v->comment_author_IP)));
                        $single_comment->appendChild($dom->createElement('comment_date',
                                                                         htmlspecialchars($v->comment_date)));
                        $single_comment->appendChild($dom->createElement('comment_agent'))->appendChild(
                                $dom->createCDATASection(htmlspecialchars($v->comment_agent))
                        );
                        $single_comment->appendChild($dom->createElement('comment_content'))->appendChild(
                                $dom->createCDATASection(htmlspecialchars($v->comment_content))
                        );
                    }
                }

                $meta_data = $dom->createElement('metadata');
                $dom->appendChild($meta_data);

                foreach ($user_meta as $k => $v) {
                    $k = is_numeric(substr($k, 0, 1)) ? '_' . $k : $k;
                    $key = $dom->createElement(htmlspecialchars($k));
                    $meta_data->appendChild($key);
                    foreach ($v as $value) {
                        $key->appendChild($dom->createElement('item', htmlspecialchars($value)));
                    }
                }

                $dom->preserveWhiteSpace = false;
                $dom->formatOutput = true;

                return $dom->saveXML();
        }
    }

    /**
     * Returns any content published by the user on the website, including comments.
     * 
     * @since   4.1.9
     * @access  public
     * 
     * @param   string $email   Valid user email
     * @return  array|null
     */
    public function get_user_content($email)
    {
        if (!($email = sanitize_email($email))) {
            return null;
        }

        $user = get_user_by('email', $email);
        if (!$user instanceof WP_User) {
            return null;
        }

        // Get user metadata and comments
        $user_meta = array_diff_key(get_user_meta($user->ID), array_flip($this->diff_user_meta));
        $comments = get_comments(array(
            'author_email'       => $user->user_email,
            'include_unapproved' => true));

        // Count user posts
        $user_posts = array();
        $post_types = get_post_types(array('public' => true));
        foreach ($post_types as $post_type) {
            $user_posts[$post_type] = count_user_posts($user->ID, $post_type);
        }

        return compact('comments', 'user', 'user_meta', 'user_posts');
    }

    /**
     * Checks if the user has any content published on the site (including comments).
     * 
     * @since   4.2.0
     * @access  public
     * 
     * @param   string $email
     * @return  bool
     */
    public function user_has_content($email)
    {
        $user_content = $this->get_user_content($email);
        return !empty($user_content['comments']) || array_sum($user_content['user_posts']);
    }

    // --- UTILITIES ---

    /**
     * The function the CRON job calls. It checks if a complaint/delete/rectify
     * request was confirmed during a period defined by request_validity (3 days).
     * If it wasn't, the request gets removed.
     * 
     * @since   4.2.0
     * @access  public
     * 
     * @param   string $email
     */
    public function clean_requests($email)
    {
        $email = sanitize_text_field(wp_unslash($email));
        $requests = $this->all_requests();

        if (strlen($email) && isset($requests[$email]) &&
                $requests[$email]['status'] !== 'confirmed' &&
                $requests[$email]['ts_u'] > time() - $this->request_validity &&
                $requests[$email]['type'] !== 'access') {
            unset($requests[$email]);
            update_option('CWIS_GDPR_REQUESTS', $requests);
        }
    }

    /**
     * Whenever a user places a request, the request key is saved as a user meta for comparison.
     * 
     * @since   4.2.0
     * @access  public
     * 
     * @param   int    $user_id  The user ID.
     * @param   string $meta_key The user meta key.
     */
    public function clean_user_request_key($user_id, $meta_key)
    {
        $user_id = (int) $user_id;
        $meta_key = sanitize_text_field($meta_key);

        if (($meta = get_user_meta($user_id, $meta_key, true))) {
            delete_user_meta($user_id, $meta_key);
        }

        $this->get_class_instance('Cwis_GDPR_Auditlog');
        /* translators: Name of the usermeta */
        Cwis_GDPR_Auditlog::log($user_id,
                                sprintf(esc_html__('User request expired. Removing %s user_meta.', CWIS_PLUGIN_SLUG),
                                                   $meta_key));
    }

    /**
     * Generates a random pin (by default, the number of digits is 6).
     * This pin is necessary to use with the audit log files.
     *
     * @since   4.1.9
     * @access  public
     * 
     * @param   integer $length
     * @return  string
     */
    public function generate_pin($length = 6)
    {
        $bytes = openssl_random_pseudo_bytes($length / 2);
        return strtoupper(bin2hex($bytes));
    }

    // --- PRIVATE ---

    /**
     * Set the user request as confirmed.
     * Unschedules the cron jobs that clean up the requests that haven't been confirmed.
     * 
     * @since   4.2.0
     * @access  protected
     * 
     * @param   string $email
     * @return  bool
     */
    protected function confirm_request($email)
    {
        $email = sanitize_text_field(wp_unslash($email));
        $requests = $this->all_requests();

        if (strlen($email) && isset($requests[$email])) {
            $requests[$email]['status'] = 'confirmed';
            $type = $requests[$email]['type'];

            $user = get_user_by('email', $email);
            if ($user instanceof WP_User) {
                $meta_key = self::$plugin_name . "_{$type}_key";
                update_option('CWIS_GDPR_REQUESTS', $requests);
                delete_user_meta($user->ID, $meta_key);

                $args = array('user_id' => $user->ID, 'meta_key' => $meta_key);
                if (($time = wp_next_scheduled('clean_gdpr_user_request_key', $args))) {
                    wp_unschedule_event($time, 'clean_gdpr_user_request_key', $args);
                }
            }

            return true;
        }

        return false;
    }

    /**
     * Removes the user from the requests list.
     * 
     * @since   4.2.0
     * @access  protected
     * 
     * @param   string $email
     * @return  bool
     */
    protected function remove_request($email)
    {
        $email = sanitize_text_field(wp_unslash($email));
        $requests = $this->all_requests();

        if (strlen($email) && isset($requests[$email])) {
            unset($requests[$email]);
            update_option('CWIS_GDPR_REQUESTS', $requests);
            return true;
        }

        return false;
    }

}
