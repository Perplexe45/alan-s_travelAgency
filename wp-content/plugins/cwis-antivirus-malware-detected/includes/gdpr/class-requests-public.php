<?php

/**
 * The GDPR-requests-
 * specific functionality of the plugin.
 * 
 * @link       https://cobweb-security.com
 * @since      4.1.9
 *
 * @package    Cwis
 * @subpackage Cwis/includes/gdpr
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_GDPR_Requests_Public extends Cwis_GDPR_Requests
{

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
        $this->get_class_instance('Cwis_GDPR_Email');
    }

    // --- REQUESTS ---

    /**
     * Removes the user from the requests table, sends a notification email and
     * delete the user from the site
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @param  WP_User $user  The user object.
     * @param  string  $index The request key on the requests array.
     * @return void
     */
    public function delete_user($user, $index)
    {
        if (!$user instanceof WP_User) {
            return false;
        }

        if (!function_exists('wp_delete_user')) {
            require_once( ABSPATH . 'wp-admin/includes/user.php' );
        }

        $email = $user->user_email;
        if (parent::remove_request($email)) {
            $token = $this->generate_pin();
            Cwis_GDPR_Email::send($email, 'delete-resolved', array('token' => $token));
            Cwis_GDPR_Auditlog::log($user->ID, esc_html__('User was removed from the site.', CWIS_PLUGIN_SLUG));
            Cwis_GDPR_Auditlog::export_log($user->ID, $token);
            wp_delete_user($user->ID);
            wp_logout();
            return true;
        }
    }

    /**
     * Prints a request form.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     * @static
     * @param  string $type The type of request to display the correct form.
     * @return mixed        Print the form html.
     */
    public static function request_form($type)
    {
        if (!$this->is_valid_request_type($type)) {
            return;
        }

        ob_start();
        include plugin_dir_path(dirname(__FILE__)) . 'public/partials/' . $type . '-form.php';
        return ob_get_clean();
    }

    /**
     * Sends an email to the end user so it can confirm his request.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function send_request_email()
    {
        if (!isset($_POST['type']) || !$this->is_valid_request_type($_POST['type'])) {
            $message = esc_html__('Invalid type of request. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        if (!isset($_POST['gdpr_request_nonce']) || !wp_verify_nonce(sanitize_key($_POST['gdpr_request_nonce']),
                                                                                  'gdpr-add-to-requests')) {
            $message = esc_html__('We could not verify the user email or the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $type = sanitize_text_field(wp_unslash($_POST['type']));
        $data = isset($_POST['data']) ? sanitize_textarea_field($_POST['data']) : '';

        if (is_user_logged_in()) {
            $user = wp_get_current_user();
        } else {
            $user = isset($_POST['user_email']) ? get_user_by('email', sanitize_email($_POST['user_email'])) : null;
        }

        $email_args = array(
            'forgot_password_url' => add_query_arg(
                    array(
                'action' => 'rp',
                'key'    => get_password_reset_key($user),
                'login'  => $user->user_login,
                    ), wp_login_url()
            ),
        );

        switch ($type) {
            case 'delete':
                if (!$user instanceof WP_User) {
                    wp_safe_redirect(
                            esc_url_raw(
                                    add_query_arg(
                                            array('notify' => 1, 'user-not-found' => 1), wp_get_referer()
                                    )
                            )
                    );
                    exit;
                }

                if (in_array('administrator', $user->roles)) {
                    $admins_query = new WP_User_Query(array(
                        'role' => 'Administrator',
                    ));
                    if (1 === $admins_query->get_total()) {
                        wp_safe_redirect(
                                esc_url_raw(
                                        add_query_arg(
                                                array('notify' => 1, 'cannot-delete' => 1), wp_get_referer()
                                        )
                                )
                        );
                        exit;
                    }
                }
                break;

            case 'rectify':
            case 'complaint':
                if (!$data) {
                    wp_safe_redirect(
                            esc_url_raw(
                                    add_query_arg(
                                            array('notify' => 1, 'required-information-missing' => 1), wp_get_referer()
                                    )
                            )
                    );
                    exit;
                }
                $email_args['data'] = $data;
                break;

            case 'export':
                if (!$user instanceof WP_User) {
                    wp_safe_redirect(
                            esc_url_raw(
                                    add_query_arg(
                                            array('notify' => 1, 'user-not-found' => 1), wp_get_referer()
                                    )
                            )
                    );
                    exit;
                }
                break;
        }

        /* $key = */ parent::add_request($user->user_email, $type, $data);
        if ('export' !== $type) {
            $email_args['confirm_url'] = add_query_arg(
                    array(
                'type'  => $type,
                //'key'   => $key,
                'email' => $user->user_email,
                    ), home_url()
            );
        } else {
            $email_args['confirm_url_xml'] = add_query_arg(
                    array(
                'type'   => $type,
                //'key'    => $key,
                'email'  => $user->user_email,
                'format' => 'xml',
                    ), home_url()
            );
            $email_args['confirm_url_json'] = add_query_arg(
                    array(
                'type'   => $type,
                //'key'    => $key,
                'email'  => $user->user_email,
                'format' => 'json',
                    ), home_url()
            );
        }


        if (Cwis_GDPR_Email::send($user->user_email, "{$type}-request", $email_args)) {
            wp_safe_redirect(
                    esc_url_raw(
                            add_query_arg(
                                    array('notify' => 1, 'email-sent' => 1), wp_get_referer()
                            )
                    )
            );
            exit;
        } else {
            wp_safe_redirect(
                    esc_url_raw(
                            add_query_arg(
                                    array('notify' => 1, 'error' => 1), wp_get_referer()
                            )
                    )
            );
            exit;
        }
    }

    /**
     * Runs when a user confirms a request email.
     * This process the request, set the request to confirmed on the database.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function request_confirmed()
    {
        if (!is_front_page() || !isset($_GET['type'], $_GET['key'], $_GET['email'])) {
            return;
        }

        $type = sanitize_text_field(wp_unslash($_GET['type']));
        $key = sanitize_text_field(wp_unslash($_GET['key']));
        $email = sanitize_email($_GET['email']);
        $notification_email = sanitize_email(apply_filters('gdpr_admin_notification_email', get_option('admin_email')));

        $user = get_user_by('email', $email);
        if (!$user instanceof WP_User) {
            return;
        }

        $meta_key = get_user_meta($user->ID, self::$plugin_name . "_{$type}_key", true);
        if (empty($meta_key)) {
            return;
        }

        if ($key === $meta_key) {
            $notification_email_args = array(
                'type'       => $type,
                'review_url' => add_query_arg(array('page' => 'gdpr-requests#' . $type), admin_url()),
            );

            switch ($type) {
                case 'delete':
                    $found_posts = $this->user_has_content($email);
                    $needs_review = get_option('gdpr_deletion_needs_review', true);
                    if ($found_posts || $needs_review) {
                        parent::confirm_request($email);
                        Cwis_GDPR_Email::send($notification_email, 'new-request', $notification_email_args);
                        Cwis_GDPR_Auditlog::log($user->ID,
                                                esc_html__('User confirmed a request to be deleted.', CWIS_PLUGIN_SLUG));
                        if ($found_posts) {
                            Cwis_GDPR_Auditlog::log($user->ID,
                                                    esc_html__('Content was found for that user.', CWIS_PLUGIN_SLUG));
                        }
                        Cwis_GDPR_Auditlog::log($user->ID,
                                                esc_html__('User added to the erasure review table.', CWIS_PLUGIN_SLUG));
                        wp_safe_redirect(
                                esc_url_raw(
                                        add_query_arg(
                                                array('user-deleted' => 0, 'notify' => 1), home_url()
                                        )
                                )
                        );
                        exit;
                    } else {
                        if ($this->delete_user($user, $key)) {
                            wp_safe_redirect(
                                    esc_url_raw(
                                            add_query_arg(
                                                    array('user-deleted' => 1, 'notify' => 1), home_url()
                                            )
                                    )
                            );
                            exit;
                        }
                    }
                    break;

                case 'rectify':
                case 'complaint':
                    parent::confirm_request($email);
                    Cwis_GDPR_Email::send($notification_email, 'new-request', $notification_email_args);
                    Cwis_GDPR_Auditlog::log($user->ID,
                                            esc_html__('User placed a request for rectification or a complaint.',
                                                       CWIS_PLUGIN_SLUG));
                    wp_safe_redirect(
                            esc_url_raw(
                                    add_query_arg(
                                            array('request-confirmed' => 1, 'notify' => 1), home_url()
                                    )
                            )
                    );
                    exit;
                    break;

                case 'export':
                    $format = isset($_GET['format']) ? sanitize_text_field(wp_unslash($_GET['format'])) : 'xml';
                    /* translators: File format. Can be XML or JSON */
                    Cwis_GDPR_Auditlog::log($user->ID,
                                            sprintf(esc_html__('User downloaded all their data in %s format.',
                                                               CWIS_PLUGIN_SLUG), $format));
                    $this->file_export_data($user->user_email, $format, $key);
                    break;
            }
        }
    }

    /**
     * Downloads the user data export in the chosen format.
     * @since  1.2.0
     * @param  string $email  The recipient.
     * @param  string $format The export format. XML or JSON.
     * @param  string $key    The request array key.
     */
    private function file_export_data($email, $format, $key)
    {
        $email = sanitize_email($email);
        $format = sanitize_text_field(wp_unslash($format));
        //$key = sanitize_text_field(wp_unslash($key));

        $export = GDPR::generate_export($email, $format);
        if ($export) {
            parent::remove_request($email);
            header('Content-Type: application/octet-stream');
            header('Content-Description: File Transfer');
            header('Content-Disposition: attachment; filename=' . $email . '.' . $format);
            echo $export;
        }
        die();
    }

}
