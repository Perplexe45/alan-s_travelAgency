<?php

/**
 * The GDPR-requests-
 * specific functionality of the plugin.
 * 
 * @link       https://cobweb-security.com
 * @since      4.1.9
 *
 * @package    Cwis
 * @subpackage Cwis/includes/gdpr
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_GDPR_Requests_Admin extends Cwis_GDPR_Requests
{

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
        $this->get_class_instance('Cwis_GDPR_Email');
    }

    // --- REQUESTS ---

    /**
     * Add the user to the deletion requests list.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function add_to_deletion_requests()
    {
        if (!isset($_POST['gdpr_deletion_requests_nonce']) ||
                !wp_verify_nonce(sanitize_key($_POST['gdpr_deletion_requests_nonce']), 'gdpr-add-to-deletion-requests')) {
            $message = esc_html__('We could not verify the user email or the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $email = sanitize_email($_POST['user_email']);
        $user = get_user_by('email', $email);

        if (!$user instanceof WP_User) {
            add_settings_error('gdpr-requests', 'invalid-user', esc_html__('User not found.', CWIS_PLUGIN_SLUG), 'error');
            set_transient('settings_errors', get_settings_errors(), 30);
            wp_safe_redirect(
                    esc_url_raw(
                            add_query_arg(
                                    array('settings-updated' => true), wp_get_referer() . '#delete'
                            )
                    )
            );
            exit;
        } else {
            if (in_array('administrator', $user->roles)) {
                $admins_query = new WP_User_Query(array(
                    'role' => 'Administrator'
                ));

                if ($admins_query->get_total() <= 1) {
                    /* translators: User email */
                    add_settings_error('gdpr-requests', 'invalid-request',
                                       sprintf(esc_html__('User %s is the only admin of the site. It cannot be deleted.',
                                                          CWIS_PLUGIN_SLUG), $email), 'error');
                    set_transient('settings_errors', get_settings_errors(), 30);
                    wp_safe_redirect(
                            esc_url_raw(
                                    add_query_arg(
                                            array('settings-updated' => true), wp_get_referer() . '#delete'
                                    )
                            )
                    );
                    exit;
                }
            }
        }

        $requests = $this->all_requests();
        if (empty($requests)) {
            $this->add_request($email, 'delete', null, $status = 'confirmed');
            Cwis_GDPR_Auditlog::log($user->ID,
                                    esc_html__('User added to the deletion requests list by admin.', CWIS_PLUGIN_SLUG));
            /* translators: User email */
            add_settings_error('gdpr-requests', 'new-request',
                               sprintf(esc_html__('User %s was added to the deletion table.', CWIS_PLUGIN_SLUG), $email),
                                                  'updated');
            set_transient('settings_errors', get_settings_errors(), 30);
            wp_safe_redirect(
                    esc_url_raw(
                            add_query_arg(
                                    array('settings-updated' => true), wp_get_referer() . '#delete'
                            )
                    )
            );
            exit;
        }

        $deletion_requests = array_filter($requests,
                                          function( $arr ) {
            return 'delete' === $arr['type'];
        });
        $user_has_already_requested = array_search($email, array_column($deletion_requests, 'email'));

        if (false !== $user_has_already_requested) {
            add_settings_error('gdpr-requests', 'invalid-user',
                               esc_html__('User already placed a deletion request.', CWIS_PLUGIN_SLUG), 'error');
            set_transient('settings_errors', get_settings_errors(), 30);
            wp_safe_redirect(
                    esc_url_raw(
                            add_query_arg(
                                    array('settings-updated' => true), wp_get_referer() . '#delete'
                            )
                    )
            );
            exit;
        }

        $this->add_request($email, 'delete', null, $status = 'confirmed');
        Cwis_GDPR_Auditlog::log($user->ID,
                                esc_html__('User added to the deletion requests list by admin.', CWIS_PLUGIN_SLUG));
        /* translators: User email */
        add_settings_error('gdpr-requests', 'new-request',
                           sprintf(esc_html__('User %s was added to the deletion table.', CWIS_PLUGIN_SLUG), $email),
                                              'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array('settings-updated' => true), wp_get_referer() . '#delete'
                        )
                )
        );
        exit;
    }

    /**
     * Cancels a request.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function cancel_request()
    {
        if (!isset($_POST['type'])) {
            $message = esc_html__('We could not verify the type of request you want to cancel.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $type = sanitize_text_field(trim(strtolower($_POST['type'])));
        if (!$this->is_valid_request_type($type)) {
            /* translators: The type of request */
            $message = sprintf(esc_html__('Type of request \'%s\' is not an allowed type.', CWIS_PLUGIN_SLUG), $type);
            $this->debug($message);
            wp_die($message);
        }

        $nonce_field = 'gdpr_cancel_' . $type . '_nonce';
        if (!isset($_POST[$nonce_field], $_POST['user_email']) || !wp_verify_nonce(sanitize_key($_POST[$nonce_field]),
                                                                                                'gdpr-request-nonce')) {
            $message = esc_html__('We could not verify the user email or the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $email = sanitize_email($_POST['user_email']);
        //$index = sanitize_text_field(wp_unslash($_POST['index']));
        parent::remove_request($email);

        $user = get_user_by('email', $email);
        /* translators: The type of request i.e 'delete' */
        Cwis_GDPR_Auditlog::log($user->ID,
                                sprintf(esc_html__('User was removed from the %s request list by admin.',
                                                   CWIS_PLUGIN_SLUG), $type));

        /* translators: User email */
        add_settings_error('gdpr-requests', 'remove-request',
                           sprintf(esc_html__('User %s was removed from this request table.', CWIS_PLUGIN_SLUG), $email),
                                              'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array('settings-updated' => true), wp_get_referer() . '#' . $type
                        )
                )
        );
        exit;
    }

    /**
     * Marks a request as resolved and notifies the user.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function mark_resolved()
    {
        if (!isset($_POST['type'])) {
            $message = esc_html__('We could not verify the type of request you want to cancel.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $type = sanitize_text_field(trim(strtolower($_POST['type'])));
        if (!$this->is_valid_request_type($type)) {
            /* translators: The type of request i.e. 'delete' */
            $message = sprintf(esc_html__('Type of request \'%s\' is not an allowed type.', CWIS_PLUGIN_SLUG), $type);
            $this->debug($message);
            wp_die($message);
        }

        $nonce_field = 'gdpr_' . $type . '_mark_resolved_nonce';

        if (!isset($_POST[$nonce_field], $_POST['user_email'], $_POST['index']) || !wp_verify_nonce(sanitize_key($_POST[$nonce_field]),
                                                                                                                 'gdpr-mark-as-resolved')) {
            $message = esc_html__('We could not verify the user email or the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $email = sanitize_email($_POST['user_email']);
        //$index = sanitize_text_field($_POST['index']);
        parent::remove_request($email);

        Cwis_GDPR_Email::send($email, $type . '-resolved');

        $user = get_user_by('email', $email);
        /* translators: User email */
        Cwis_GDPR_Auditlog::log($user->ID,
                                sprintf(esc_html__('User %s request was marked as resolved by admin.', CWIS_PLUGIN_SLUG),
                                                   $user->user_email));

        add_settings_error('gdpr-requests', 'resolved',
                           sprintf(esc_html__('Request was resolved. User %s has been notified.', CWIS_PLUGIN_SLUG),
                                              $email), 'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array('settings-updated' => true), wp_get_referer() . '#' . $type
                        )
                )
        );
        exit;
    }

    /**
     * Deletes a user from the admin interface.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function delete_user()
    {
        if (!isset($_POST['gdpr_delete_user'], $_POST['user_email'], $_POST['index']) || !wp_verify_nonce($_POST['gdpr_delete_user'],
                                                                                                          'gdpr-request-delete-user')) {
            $message = esc_html__('We could not verify the user email or the security token. Please try again.',
                                  CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $email = sanitize_email($_POST['user_email']);
        $user = get_user_by('email', $email);
        //$index = sanitize_text_field($_POST['index']);
        parent::remove_request($email);

        $token = $this->generate_pin();
        Cwis_GDPR_Email::send($user->user_email, 'delete-resolved', array('token' => $token));

        Cwis_GDPR_Auditlog::log($user->ID, esc_html__('User was removed from the site.', CWIS_PLUGIN_SLUG));
        Cwis_GDPR_Auditlog::export_log($user->ID, $token);
        wp_delete_user($user->ID);

        /* translators: User email */
        add_settings_error('gdpr-requests', 'new-request',
                           sprintf(esc_html__('User %s was deleted from the site.', CWIS_PLUGIN_SLUG), $email),
                                              'updated');
        set_transient('settings_errors', get_settings_errors(), 30);
        wp_safe_redirect(
                esc_url_raw(
                        add_query_arg(
                                array('settings-updated' => true), wp_get_referer() . '#delete'
                        )
                )
        );
        exit;
    }

    /**
     * Anonymize comments from a user.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function anonymize_comments()
    {
        if (!isset($_POST['nonce']) || !wp_verify_nonce(sanitize_key(wp_unslash($_POST['nonce'])),
                                                                                'gdpr-anonymize-comments-action')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $email = sanitize_email($_POST['user_email']);
        $comment_count = (int) $_POST['comment_count'];

        $user = get_user_by('email', $email);
        if (!$user instanceof WP_User) {
            $message = esc_html__('User not found.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $comments = get_comments(array(
            'author_email'       => $user->user_email,
            'include_unapproved' => true,
            'number'             => $comment_count,
        ));

        foreach ($comments as $comment) {
            $new_comment = array();
            $new_comment['comment_ID'] = $comment->comment_ID;
            $new_comment['comment_author_IP'] = '0.0.0.0';
            $new_comment['comment_author_email'] = '';
            $new_comment['comment_author_url'] = '';
            $new_comment['comment_agent'] = '';
            $new_comment['comment_author'] = esc_html__('Guest', CWIS_PLUGIN_SLUG);
            $new_comment['user_id'] = 0;
            wp_update_comment($new_comment);
        }
        Cwis_GDPR_Auditlog::log($user->ID, esc_html__('User comments were anonymized.', CWIS_PLUGIN_SLUG));
        wp_send_json_success();
    }

    /**
     * Reassign content to a different user.
     * @since  1.0.0
     * @author Fernando Claussen <fernandoclaussen@gmail.com>
     */
    public function reassign_content()
    {
        if (!isset($_POST['nonce']) || !wp_verify_nonce(sanitize_key(wp_unslash($_POST['nonce'])),
                                                                                'gdpr-reassign-content-action')) {
            $message = esc_html__('We could not verify the security token. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        if (!isset($_POST['user_email'], $_POST['reassign_to'], $_POST['post_type'], $_POST['post_count'])) {
            $message = esc_html__('Essential data missing. Please try again.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $email = sanitize_email($_POST['user_email']);
        $reassign_to = (int) $_POST['reassign_to'];
        $post_type = sanitize_text_field(wp_unslash($_POST['post_type']));
        $post_count = (int) $_POST['post_count'];

        $user = get_user_by('email', $email);
        if (!$user instanceof WP_User) {
            $message = esc_html__('User not found.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_send_json_error($message);
        }

        $args = array(
            'author'         => $user->ID,
            'post_type'      => $post_type,
            'posts_per_page' => $post_count,
        );

        $posts = get_posts($args);

        if (!empty($posts)) {
            foreach ($posts as $post) {
                wp_update_post(array(
                    'ID'          => $post->ID,
                    'post_author' => $reassign_to,
                ));
            }

            $reassign_to_user = get_user_by('ID', $reassign_to);
            /* translators: 1: The post type, 2: The user the posts were reassigned to */
            Cwis_GDPR_Auditlog::log($user->ID,
                                    sprintf(esc_html__('User %s were reassigned to %s.', CWIS_PLUGIN_SLUG), $post_type,
                                                       $reassign_to_user->display_name));
            wp_send_json_success();
        }

        $message = esc_html__('Something went wrong. Please try again.', CWIS_PLUGIN_SLUG);
        $this->debug($message);
        wp_send_json_error($message);
    }

}
