<?php

/**
 * The updater-specific functionality of the plugin.
 * 
 * @link       https://cobweb-security.com
 * @since      3.3.3.3
 *
 * @package    Cwis
 * @subpackage Cwis/includes/updater
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Updater_Methods extends Cwis_Core_Foundation
{

    // Classes instances
    private $cwis_updater_config;

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);

        // Require the config file using helper method.
        $this->cwis_updater_config = $this->get_class_instance('Cwis_Updater_Config');
    }

    // --- GETTERS ---

    /**
     * Retrieves all plugins (not just activated ones).
     * 
     * @since   3.3.3
     * @return array
     */
    public function get_all_plugins_installed()
    {
        // Check if get_plugins() function exists. This is required on the front end of the
        // site, since it is in a file that is normally only loaded in the admin.
        if (!function_exists('get_plugins')) {
            include_once ABSPATH . 'wp-admin/includes/plugin.php';
        }
        $all_plugins_installed = get_plugins();

        // Process security risk data files
        foreach ($this->cwis_updater_config->security_risk_levels as $level => $plugin_securisk_data) {
            if (isset($plugin_securisk_data['datafile'])) {
                $datafile = $plugin_securisk_data['datafile'];
                $datafile_plugins = array_flip($this->get_datafile_contents($datafile, 'plugins'));
            }

            // Match plugins text domains (or slugs) with the datafile contents
            foreach ($all_plugins_installed as $plugin_key_name => $plugin) {
                $plugin_slug = strtok($plugin_key_name, '/');
                $plugin_text_domain = isset($plugin['TextDomain']) ? $plugin['TextDomain'] : $plugin_slug;
                if ($plugin_text_domain && isset($datafile_plugins[$plugin_text_domain]) ||
                        ($plugin_slug !== $plugin_text_domain) && isset($datafile_plugins[$plugin_slug])) {
                    $all_plugins_installed[$plugin_key_name]['SecuriskLevel'] = $level;
                }
            }
        }

        return $all_plugins_installed;
    }

    /**
     * Retrieves all themes (not just allowed/valid ones).
     * 
     * @since   3.3.3.3
     * @return array
     */
    public function get_all_themes_installed()
    {
        // This function has been deprecated from Wordpress 3.4.0. Use wp_get_themes() instead.
        // https://developer.wordpress.org/reference/functions/get_themes/
        $all_themes_installed = function_exists('wp_get_themes') ? wp_get_themes() : get_themes();
        foreach ($all_themes_installed as $theme_key_name => $wp_theme) { # use WP_Theme Class getter in 3.4.0+
            $all_themes_installed[$theme_key_name] = is_array($wp_theme) ? $wp_theme : array(
                'Name'        => $wp_theme->get('Name'),
                'ThemeURI'    => $wp_theme->get('ThemeURI'),
                'Description' => $wp_theme->get('Description'),
                'Author'      => $wp_theme->get('Author'),
                'AuthorURI'   => $wp_theme->get('AuthorURI'),
                'Version'     => $wp_theme->get('Version'),
                'TextDomain'  => $wp_theme->get('TextDomain')
            );
        }

        // Process security risk data files
        foreach ($this->cwis_updater_config->security_risk_levels as $level => $theme_securisk_data) {
            if (isset($theme_securisk_data['datafile'])) {
                $datafile = $theme_securisk_data['datafile'];
                $datafile_contents = $this->get_datafile_contents($datafile, 'themes');
                $datafile_plugins = !empty($datafile_contents) ? array_flip($datafile_contents) : array();
            }

            // Match plugins text domains (or slugs) with the datafile contents
            if (!empty($datafile_plugins)) {
                foreach ($all_themes_installed as $theme_key_name => $theme) {
                    $theme_slug = strtok($theme_key_name, '/');
                    $theme_text_domain = isset($theme['TextDomain']) ? $theme['TextDomain'] : $theme_slug;
                    if ($theme_text_domain && isset($datafile_plugins[$theme_text_domain]) ||
                            ($theme_slug !== $theme_text_domain) && isset($datafile_plugins[$theme_slug])) {
                        $all_themes_installed[$theme_key_name]['SecuriskLevel'] = $level;
                    }
                }
            }
        }

        return $all_themes_installed;
    }

    // --- DEFENDER ---

    /**
     * Deletes cached Defender Updater data.
     * 
     * @return bool
     */
    public function delete_cached_updater_data()
    {
        // Get path to plugin directory
        $plugin_dir_path = dirname(dirname(dirname(__FILE__))) . '/';

        // Get path to the temporary files directory
        $cwis_defender_filesystem = $this->get_class_instance('Cwis_Defender_Filesystem');
        $temp_dir_path = $cwis_defender_filesystem->create_temp_files_directory($plugin_dir_path);

        // Get updater data from the cache
        $path_to_cache_file = $temp_dir_path . '/cwis-updater.log';
        return $cwis_defender_filesystem->delete_cache_file_contents($path_to_cache_file);
    }

    /**
     * Get cached Defender Updater data.
     * 
     * @return array
     */
    public function get_cached_updater_data()
    {
        // Get path to plugin directory
        $plugin_dir_path = dirname(dirname(dirname(__FILE__))) . '/';

        // Get path to the temporary files directory
        $cwis_defender_filesystem = $this->get_class_instance('Cwis_Defender_Filesystem');
        $temp_dir_path = $cwis_defender_filesystem->create_temp_files_directory($plugin_dir_path);

        // Get updater data from the cache (expired in 10 minutes)
        $path_to_cache_file = $temp_dir_path . '/cwis-updater.log';
        $updater_data = $cwis_defender_filesystem->load_cache_file_contents($path_to_cache_file, true, 600);

        // Save encoded updater data or decode data
        if (empty($updater_data)) {
            $updater_data = $this->get_defender_updater_data();
            $cwis_defender_filesystem->save_cache_file_contents($path_to_cache_file,
                                                                array_map("json_encode", $updater_data));
        } else {
            $updater_data = array_map("json_decode", $updater_data);
        }

        return $updater_data;
    }

    /**
     * Returns the Defender Updater data.
     * 
     * @since   3.3.9.27
     * @return  array
     */
    public function get_defender_updater_data()
    {
        // Get list of all plugins and themes installed
        $all_plugins_installed = $this->get_all_plugins_installed();
        $all_themes_installed = $this->get_all_themes_installed();

        // Read plugin/theme updates settings from database
        $cwis_auto_plugin_updates = $this->get_cwis_auto_plugin_updates(true);
        $cwis_auto_theme_updates = $this->get_cwis_auto_theme_updates();

        $total_plugins = $total_themes = 0;
        $securisk_count = array(0, 0, 0, 0); //Secured,Low,Medium,High
        //
        // Analyse plugins installed
        foreach ($all_plugins_installed as $plugin_key_name => $plugin) {
            $is_checkbox_checked = isset($cwis_auto_plugin_updates[$plugin_key_name]) && $cwis_auto_plugin_updates[$plugin_key_name];

            // Get plugin security risk level
            $plugin_securisk_level = $is_checkbox_checked ? # reduce risk if checked
                    0 : (isset($plugin['SecuriskLevel']) ? $plugin['SecuriskLevel'] : 1);
            $securisk_count[$plugin_securisk_level] ++;
            $total_plugins++;
        }

        // Analyse themes installed
        foreach ($all_themes_installed as $theme_key_name => $theme) {
            $is_checkbox_checked = isset($cwis_auto_theme_updates[$theme_key_name]) && $cwis_auto_theme_updates[$theme_key_name];

            // Get theme security risk level
            $theme_securisk_level = $is_checkbox_checked ? # reduce risk if checked
                    0 : (isset($theme['SecuriskLevel']) ? $theme['SecuriskLevel'] : 1);
            $securisk_count[$theme_securisk_level] ++;
            $total_themes++;
        }

        // Collect result data
        $updater_data = array(
            array(
                'type'  => 'plugins',
                'name'  => 'Total Plugins',
                'count' => $total_plugins
            ),
            array(
                'type'  => 'themes',
                'name'  => 'Total Themes',
                'count' => $total_themes
            ),
            array(
                'type'    => 'secured',
                'name'    => 'Auto Updated',
                'context' => 'success',
                'count'   => $securisk_count[0]
            ),
            array(
                'type'    => 'risk_low',
                'name'    => 'Low Risk',
                'context' => 'info',
                'count'   => $securisk_count[1]
            ),
            array(
                'type'    => 'risk_medium',
                'name'    => 'Medium Risk',
                'context' => 'warning',
                'count'   => $securisk_count[2]
            ),
            array(
                'type'    => 'risk_high',
                'name'    => 'High Risk',
                'context' => 'danger',
                'count'   => $securisk_count[3]
            )
        );

        return $updater_data;
    }

    // --- SETTINGS ---

    /**
     * Returns the settings of auto core updates.
     * 
     * @since   3.3.3.3
     * @return array
     */
    public function get_cwis_auto_core_updates()
    {
        $cwis_auto_core_updates = json_decode(get_option('CWIS_CORE_UPDATES'), true);
        if (!is_array($cwis_auto_core_updates)) {
            $cwis_auto_core_updates = array('dev' => 0, 'minor' => 1, 'major' => 0);
        }

        return $cwis_auto_core_updates;
    }

    /**
     * Returns the settings of plugin auto updates.
     * 
     * @since   3.3.0
     * @param bool $update_itself
     * @return array
     */
    public function get_cwis_auto_plugin_updates($update_itself = false)
    {
        $cwis_auto_plugin_updates = json_decode(get_option('CWIS_PLUGIN_UPDATES'), true);
        if (empty($cwis_auto_plugin_updates) || !is_array($cwis_auto_plugin_updates)) {
            $cwis_auto_plugin_updates = $update_itself ? # allow to update itself automatically?
                    array('cwis-antivirus-malware-detected/cwis-antivirus-malware-detected.php' => 1) : array();
        }

        return $cwis_auto_plugin_updates;
    }

    /**
     * Returns the settings of theme auto updates.
     * 
     * @since   3.3.3.3
     * @return  array
     */
    public function get_cwis_auto_theme_updates()
    {
        $cwis_auto_theme_updates = json_decode(get_option('CWIS_THEME_UPDATES'), true);
        if (empty($cwis_auto_theme_updates) || !is_array($cwis_auto_theme_updates)) {
            $cwis_auto_theme_updates = array();
        }

        return $cwis_auto_theme_updates;
    }

    // --- OVERRIDES ---

    /**
     * Overrides the WordPress.org API plugins update check.
     * 
     * @since   3.3.0
     * @param   object $request
     * @param   string $url
     */
    public function override_api_update_check($request, $url)
    {
        $this->debug('override_api_update_check()', $url);

        if (0 === strpos($url, 'https://api.wordpress.org/plugins/update-check/')) {
            $cwis_auto_plugin_updates = $this->get_cwis_auto_plugin_updates();

            // Exclude from a request the plugins not allowed to update
            $api_plugins_requested = json_decode($request['body']['plugins'], true);
            foreach ($cwis_auto_plugin_updates as $plugin_key_name => $allow_updates) {
                if (!$allow_updates && isset($api_plugins_requested['plugins'][$plugin_key_name])) {
                    unset($api_plugins_requested['plugins'][$plugin_key_name]);
                }
            }
            $request['body']['plugins'] = json_encode($api_plugins_requested);
        }

        if (0 === strpos($url, 'https://api.wordpress.org/themes/update-check/')) {
            $cwis_auto_theme_updates = $this->get_cwis_auto_theme_updates();

            // Exclude from a request the themes not allowed to update
            $api_themes_requested = json_decode($request['body']['themes'], true);
            foreach ($cwis_auto_theme_updates as $theme_key_name => $allow_updates) {
                if (!$allow_updates && isset($api_themes_requested['themes'][$theme_key_name])) {
                    unset($api_themes_requested['themes'][$theme_key_name]);
                }
            }
            $request['body']['themes'] = json_encode($api_themes_requested);
        }

        return $request; // the normal API response
    }

    /**
     * Selectively enables or disables core automatic background updates via filter.
     * https://codex.wordpress.org/Configuring_Automatic_Background_Updates
     * 
     * @since   3.3.3.3
     */
    public function override_auto_core_updates()
    {
        $cwis_auto_core_updates = $this->get_cwis_auto_core_updates();
        foreach ($cwis_auto_core_updates as $core_update_type => $is_enabled) {
            if (isset($this->cwis_updater_config->auto_core_update_types[$core_update_type])) {
                add_filter('allow_dev_auto_core_updates', '__return_' . ($is_enabled ? 'true' : 'false'));
            }
        }
    }

    /**
     * Enables plugin automatic background updates via filter.
     * 
     * @since   3.1.0.5
     * @param   object $update
     * @param   mixed $item
     */
    public function override_auto_plugin_updates($update, $item)
    {
        $this->debug('override_auto_plugin_updates()', $item);

        $cwis_auto_plugin_updates = $this->get_cwis_auto_plugin_updates(true);

        // Add support for Wordpress 3.8.1 and below
        $plugin_key_name = !is_string($item) && isset($item->plugin) ? $item->plugin : $item;
        if (is_string($plugin_key_name) && isset($cwis_auto_plugin_updates[$plugin_key_name])) { # is allowed to update?
            return $cwis_auto_plugin_updates[$plugin_key_name] ? true : false;
        }

        return $update; // the normal API response
    }

    /**
     * Enables theme automatic background updates via filter.
     * 
     * @since   3.3.3.3
     * @param   object $update
     * @param   mixed $item
     */
    public function override_auto_theme_updates($update, $item)
    {
        $this->debug('override_auto_theme_updates()', $item);

        $cwis_auto_theme_updates = $this->get_cwis_auto_theme_updates(true);

        // Add support for Wordpress 3.8.1 and below
        $theme_key_name = !is_string($item) && isset($item->theme) ? $item->theme : $item;
        if (is_string($theme_key_name) && isset($cwis_auto_theme_updates[$theme_key_name])) { # is allowed to update?
            return $cwis_auto_theme_updates[$theme_key_name] ? true : false;
        }

        return $update; // the normal API response
    }

    // --- HELPERS ---

    /**
     * Returns an array of all types of Wordpress core updates.
     * 
     * @since   3.3.3.3
     * @return  array
     */
    public function get_auto_core_update_types()
    {
        return $this->cwis_updater_config->auto_core_update_types;
    }

    /**
     * Returns an array of possible plugin security risk levels containing security
     * contexts, titles and descriptions.
     * 
     * @since   3.3.3
     * @return  array
     */
    public function get_security_risk_levels()
    {
        return $this->cwis_updater_config->security_risk_levels;
    }

    // --- PRIVATE ---

    /**
     * Callback function that converts to lowercase, filters and trims string values.
     * 
     * @param   string $string
     * @return  string
     */
    private function convert_datafile_contents($string)
    {
        return trim(preg_replace('/[^a-z0-9]+/', '-', strtolower($string)), '-');
    }

    /**
     * Sanitizes data file name and returns its contents as an array.
     *
     * @since   3.3.3
     * @access  private
     * @param   string      $datafile   Data file name (not an absolute path, only filename).
     * @param   bool        $optimize   Optimize data file contents?
     * @return  array                   The list of Wordpress plugins.
     */
    private function get_datafile_contents($datafile, $category = 'plugins', $optimize = false)
    {
        if ($category !== 'plugins' && $category !== 'themes') {
            $message = esc_html__('Incorrect datafile category parameter', CWIS_PLUGIN_SLUG) . ' '
                    . esc_html__('at plugin "WebDefender Security".', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        // Only alphanumeric, underscope, dot and hyphen allowed
        $datafile_sanitized = preg_replace('~[^a-z0-9_\.-]+~si', '', $datafile);
        $path_to_datafile = plugin_dir_path(dirname(dirname(__FILE__))) . 'admin/data/' . $category . '/' . $datafile_sanitized;

        // Read data file contents as array
        $datafile_contents = is_file($path_to_datafile) ? array_map('trim', @file($path_to_datafile)) : array();
        if ($optimize && !empty($datafile_contents)) {
            // Convert and update datafile contents with unique values
            $datafile_contents_converted = array_map(array($this, 'convert_datafile_contents'), $datafile_contents);
            if (sort($datafile_contents_converted)) {
                $datafile_contents_imploded = trim(implode("\n", array_unique($datafile_contents_converted)));
                @file_put_contents($path_to_datafile, $datafile_contents_imploded, LOCK_EX);
                return $this->get_datafile_contents($datafile, $category, false);
            }
        }

        return array_filter($datafile_contents, 'strlen');
    }

}
