<?php

/**
 * The file that defines the foundation plugin class.
 * 
 * Defines the plugin name, version, and helper methods.
 *
 * @link       https://cobweb-security.com
 * @since      3.3.3
 *
 * @package    Cwis
 * @subpackage Cwis/includes/core
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Core_Foundation
{

    /**
     * Enables debug logging.
     * 
     * @since   4.0.5
     * @access  public
     * @var     bool 
     */
    protected $debugger = false;

    /**
     * The loader that's responsible for maintaining and registering all hooks that power
     * the plugin.
     *
     * @since    1.0.0
     * @access   protected
     * @var      Cwis_Core_Loader    $loader    Maintains and registers all hooks for the plugin.
     */
    protected $loader;

    /**
     * The ID of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $plugin_name    The ID of this plugin.
     */
    private $plugin_name;

    /**
     * The version of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $version    The current version of this plugin.
     */
    private $version;

    /**
     * Initialize the class and set its properties.
     *
     * @since   1.0.0
     * @param   string  $plugin_name       The name of this plugin.
     * @param   string  $version    The version of this plugin.
     * @param   null|Cwis_Core_Loader   $loader
     */
    public function __construct($plugin_name, $version, $loader = null)
    {
        $this->plugin_name = $plugin_name;
        $this->version = $version;

        // Loader manages the actions and filters of the core plugin.
        if (!$loader || !($loader instanceof Cwis_Core_Loader)) {
            $this->loader = $this->get_class_instance('Cwis_Core_Loader');
            if (($class = get_class($this)) !== 'Cwis' && $class !== 'Cwsd') {
                $this->debug('', null, 3); // debug broken loader
            }
        } else {
            $this->loader = & $loader;
        }
    }

    /**
     * Checks if the class has been loaded and returns class instance if loaded.
     *
     * @since   3.3.3
     * @param string $class_name
     */
    public function get_class_instance($class_name)
    {
        // Autoload classes: 
        //  Cwis_Application_Admin => 'includes/application/class-admin.php'
        //  Cwis_GDPR_Requests_Admin => 'includes/gdpr/requests-admin.php'
        if (($class_parts = explode('_', strtolower($class_name)))) {
            $base_path = CWIS_PLUGIN_DIR_PATH . 'includes/' . $class_parts[1] . '/class';
            for ($i = 2; $i < count($class_parts); $i++) {
                $base_path .= '-' . $class_parts[$i];
                require_once $base_path . '.php';
            }
        }

        if (!class_exists($class_name, false)) {
            $str1 = __('Could not find class');
            $str2 = esc_html($class_name);
            $str3 = __('at plugin "WebDefender Security".');
            wp_die(printf('%1$s [%2$s] %3$s.', $str1, $str2, $str3));
        }

        return new $class_name($this->plugin_name, $this->version, $this->loader);
    }

    /**
     * The name of the plugin used to uniquely identify it within the context of
     * WordPress and to define internationalization functionality.
     *
     * @since     1.0.0
     * @return    string    The name of the plugin.
     */
    public function get_plugin_name()
    {
        return $this->plugin_name;
    }

    /**
     * Retrieve the version number of the plugin.
     *
     * @since     1.0.0
     * @return    string    The version number of the plugin.
     */
    public function get_version()
    {
        return $this->version;
    }

    /**
     * Saves the debug data to a "tmp/debug.log" log file inside the plugin directory.
     * 
     * @since   4.0.5
     * @access  public
     * 
     * @param   string $message
     * @param   mixed $data
     * @param   int $stack
     * @return  bool|int
     */
    public function debug($message = '', $data = null, $stack = 2)
    {
        if (!$this->debugger) {
            return;
        }

        if (null === $data && null !== $stack) {
            $backtrace = debug_backtrace();
            $stack_message = 'Called ' . $backtrace[$stack]['function'] . '()'
                    . ' from method ' . $backtrace[$stack + 1]['class'] . '::' . $backtrace[$stack + 1]['function'] . '()'
                    . ', line ' . $backtrace[$stack]['line']
                    . ' of ' . substr($backtrace[$stack]['file'], strlen(ABSPATH));
            $message = ($message ? $message . " \t" : $message) . $stack_message;
        } else {
            $message .= " \t" . preg_replace("/\s+/s", " ", print_r($data, 1));
        }

        $micro_time = microtime(true);
        $micro_seconds = sprintf("%06d", ($micro_time - floor($micro_time)) * 1000000);
        $log_entry = date("Y-m-d H:i:s.") . $micro_seconds . " \t" . $message . PHP_EOL;

        $path_to_log_file = CWIS_PLUGIN_DIR_PATH . 'tmp/debug.log';
        return @file_put_contents($path_to_log_file, $log_entry, FILE_APPEND | LOCK_EX);
    }

    /**
     * Run the loader to execute all of the hooks with WordPress.
     *
     * @since   1.0.0
     * @access  public
     */
    public function run()
    {
        $this->loader->run();
    }

    // --- PROTECTED ---

    /**
     * Filters the request COOKIE data.
     * 
     * @param string $variable_name
     * @param mixed $default
     * @param int $filter
     * @return type
     */
    protected function filter_input_cookie($variable_name = '', $default = null, $filter = FILTER_SANITIZE_SPECIAL_CHARS)
    {
        if (function_exists('filter_input')) {
            $result = filter_input(INPUT_COOKIE, $variable_name, $filter);
        } else {
            $result = isset($_COOKIE[$variable_name]) ? $_COOKIE[$variable_name] : $default;
            if ($filter) { // sanitize special characters
                $result = htmlspecialchars($result);
            }
        }

        return (empty($result) && $result !== '0') ? $default : $result;
    }

    /**
     * Filters the request POST data.
     * 
     * @param string $variable_name
     * @param mixed $default
     * @param int $filter
     * @return type
     */
    protected function filter_input_post($variable_name = '', $default = null, $filter = FILTER_SANITIZE_SPECIAL_CHARS)
    {
        if (function_exists('filter_input')) {
            $result = filter_input(INPUT_POST, $variable_name, $filter);
        } else {
            $result = isset($_POST[$variable_name]) ? $_POST[$variable_name] : $default;
            if ($filter) { // sanitize special characters
                $result = htmlspecialchars($result);
            }
        }

        return (empty($result) && $result !== '0') ? $default : $result;
    }

}
