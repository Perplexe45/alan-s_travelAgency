<?php

/**
 * The Defender functionality of the plugin.
 * 
 * Defines the plugin name, version, and hooks.
 *
 * @link       https://cobweb-security.com
 * @since      1.0.0
 *
 * @package    Cwsd
 * @subpackage Cwsd/includes/defender
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Defender_Admin extends Cwis_Core_Foundation
{

    private $bfa_nonce;
    private $delimiter = '.';

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);

        // Validate BFA NONCE option
        if (!($this->bfa_nonce = get_option('CWIS_BFA_NONCE')) || strlen($this->bfa_nonce) !== 17) {
            $this->bfa_nonce = base64_encode(rand(100000000, 999999999)) . 'NONCE';
            update_option('CWIS_BFA_NONCE', $this->bfa_nonce);
        }
    }

    /**
     * Controls output buffering, resolves plugin and theme conflicts.
     * 
     * @since   1.0.2
     * @access  private
     */
    public function output_buffering_control()
    {
        include_once ABSPATH . 'wp-admin/includes/plugin.php';

        // Require the Defender Bufferer class
        $cwis_defender_bufferer_class = $this->get_class_instance('Cwis_Defender_Bufferer');
        $cwis_defender_bufferer_callable = array($cwis_defender_bufferer_class, 'ob_start_callback');

        // Resolve known plugin conflicts
        if (is_plugin_active('buddypress/bp-loader.php')) {
            // Replace the full URL to current upload location in BuddyPress
            $this->loader->add_filter('bp_core_avatar_url', $cwis_defender_bufferer_class, 'ob_start_callback',
                                      PHP_INT_MAX);
        } else
        if (is_plugin_active('wp-rocket/wp-rocket.php')) {
            // Use buffering replacement filter provided by WP Rocket plugin
            $this->loader->add_filter('rocket_buffer', $cwis_defender_bufferer_class, 'ob_start_callback', PHP_INT_MAX);
        }

        // Turn on default output buffering
        ob_start($cwis_defender_bufferer_callable);
    }

    /**
     * Reinstalls guarder protection on any plugin activation.
     * 
     * @since   4.1.3
     * @access  public
     * 
     * @param   string $plugin Path to the main plugin file from plugins directory.
     * @param   bool $network_activation Whether to enable the plugin for all sites in the network.
     */
    public function reinstall_guarder_protection($plugin, $network_activation = false)
    {
        if ($network_activation || $plugin !== plugin_basename(CWIS_MAIN_FILE_PATH)) {
            $cwis_defender_filesystem = $this->get_class_instance('Cwis_Defender_Filesystem');
            $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');

            // Put directory indexes
            $cwis_defender_filesystem->put_directory_indexes();

            // Protect content directories
            $cwis_defender_filesystem->protect_content_dirs();

            // Install the guarder's traps
            $cwis_defender_guarder->manage_traps(true);
        }
    }

    // --- ANTIBOT ---

    /**
     * Logs antibot activity after a user login has failed.
     * 
     * @since   4.1.0.5
     * @access  public
     */
    public function wordpress_antibot_login_failed()
    {
        $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');

        // Get value of the protection cookie
        $cwsd_cookie = $this->filter_input_cookie('_cwsd_cookie');

        // Save the counter of the dynamic protection field
        $_cwsd_input = $this->filter_input_post('_cwsd_input');
        list($cwsd_input, $cwsd_cnt) = array_pad(explode($this->delimiter, $_cwsd_input), 2, null);
        $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'BFA' . $cwsd_cnt);

        // Block user if login failed more than X times
        $activity = $cwis_defender_guarder->check_antibot_activity($cwsd_cookie, 'BFA' . $cwsd_cnt);
        if ($activity[15]['human'] > 6 || $activity[60]['bot'] > 3) {
            $cwis_defender_guarder->block_user_access('BruteForce'); //block human for 15 min, bot for an hour
        } elseif ($activity[60]['human'] > 20 || $activity[60]['bot'] > 10) {
            $cwis_defender_guarder->block_user_ip('BruteForce'); //hard block for 1 day
        }
    }

    /**
     * Filters the message displayed on the WordPress Log In page above the Log In form.
     * 
     * @since   4.1.1
     * @access  public
     * 
     * @param   string $message
     * @return  string
     */
    public function wordpress_antibot_login_message($message)
    {
        $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');

        // Get value of the protection cookie
        $cwsd_cookie = $this->filter_input_cookie('_cwsd_cookie');

        // Block user if login failed more than X times
        $activity = $cwis_defender_guarder->check_antibot_activity($cwsd_cookie);
        if ($activity[60]['human'] > 6) { //block bot for an hour
            return '<p class="message">' . __('Login blocked due to repeated failed attempts.')
                    . ' ' . __('Please come back later and try again.') . '</p>';
        } elseif ($activity[15]['human'] > 6) { //block human for 15 min
            return '<p class="message">' . __('Login blocked due to repeated failed attempts.')
                    . ' ' . __('Please come back and try again in 15 minutes.') . '</p>';
        }

        return $message;
    }

    /**
     * Adds Antibot Protection script in <head> element.
     *
     * @since   4.0.2
     * @access  public
     * 
     * @param   string $data
     * @return  string
     */
    public function wordpress_antibot_protection($data)
    {
        $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');
        $cwsd_cookie = $cwis_defender_guarder->create_cwsd_uid('', 7);
        $cwsd_input = $cwis_defender_guarder->create_cwsd_uid($this->bfa_nonce, 7);

        /*
         * Cookies.js - 1.2.3
         * https://github.com/ScottHamper/Cookies
         */
        echo '<script>(function(d,f){"use strict";var h=function(d){if("object"!==typeof d.document)throw Error("Cookies.js requires a `window` with a `document` object");var b=function(a,e,c){return 1===arguments.length?b.get(a):b.set(a,e,c)};b._document=d.document;b._cacheKeyPrefix="cookey.";b._maxExpireDate=new Date("Fri, 31 Dec 9999 23:59:59 UTC");b.defaults={path:"/",secure:!1};b.get=function(a){b._cachedDocumentCookie!==b._document.cookie&&b._renewCache();a=b._cache[b._cacheKeyPrefix+a];return a===f?f:decodeURIComponent(a)};
b.set=function(a,e,c){c=b._getExtendedOptions(c);c.expires=b._getExpiresDate(e===f?-1:c.expires);b._document.cookie=b._generateCookieString(a,e,c);return b};b.expire=function(a,e){return b.set(a,f,e)};b._getExtendedOptions=function(a){return{path:a&&a.path||b.defaults.path,domain:a&&a.domain||b.defaults.domain,expires:a&&a.expires||b.defaults.expires,secure:a&&a.secure!==f?a.secure:b.defaults.secure}};b._isValidDate=function(a){return"[object Date]"===Object.prototype.toString.call(a)&&!isNaN(a.getTime())};
b._getExpiresDate=function(a,e){e=e||new Date;"number"===typeof a?a=Infinity===a?b._maxExpireDate:new Date(e.getTime()+1E3*a):"string"===typeof a&&(a=new Date(a));if(a&&!b._isValidDate(a))throw Error("`expires` parameter cannot be converted to a valid Date instance");return a};b._generateCookieString=function(a,b,c){a=a.replace(/[^#$&+\^`|]/g,encodeURIComponent);a=a.replace(/\(/g,"%28").replace(/\)/g,"%29");b=(b+"").replace(/[^!#$&-+\--:<-\[\]-~]/g,encodeURIComponent);c=c||{};a=a+"="+b+(c.path?";path="+
c.path:"");a+=c.domain?";domain="+c.domain:"";a+=c.expires?";expires="+c.expires.toUTCString():"";return a+=c.secure?";secure":""};b._getCacheFromString=function(a){var e={};a=a?a.split("; "):[];for(var c=0;c<a.length;c++){var d=b._getKeyValuePairFromCookieString(a[c]);e[b._cacheKeyPrefix+d.key]===f&&(e[b._cacheKeyPrefix+d.key]=d.value)}return e};b._getKeyValuePairFromCookieString=function(a){var b=a.indexOf("="),b=0>b?a.length:b,c=a.substr(0,b),d;try{d=decodeURIComponent(c)}catch(k){console&&"function"===
typeof console.error&&console.error(\'Could not decode cookie with key "\'+c+\'"\',k)}return{key:d,value:a.substr(b+1)}};b._renewCache=function(){b._cache=b._getCacheFromString(b._document.cookie);b._cachedDocumentCookie=b._document.cookie};b._areEnabled=function(){var a="1"===b.set("cookies.js",1).get("cookies.js");b.expire("cookies.js");return a};b.enabled=b._areEnabled();return b},g=d&&"object"===typeof d.document?h(d):h;"function"===typeof define&&define.amd?define(function(){return g}):"object"===
typeof exports?("object"===typeof module&&"object"===typeof module.exports&&(exports=module.exports=g),exports.Cookies=g):d.Cookies=g})("undefined"===typeof window?this:window);</script>' . PHP_EOL;

        // Custom code
        ?>
        <script type="text/javascript">
            var cwsd_cnt = 0;
            var cwsd_evts = {
                clipboard: ['paste'],
                document: ['load', 'pageshow', 'resize', 'scroll'],
                keyboard: ['keydown'],
                mouse: ['mousedown', 'mousemove', 'mouseup', 'wheel'],
                touch: ['touchstart']
            };
            var cwsd_frms = [];
            var cwsd_input = '<?php echo $cwsd_input; ?>';
            var cwsd_timer = setInterval(count_cwsd_evt, 42);
            if (Cookies && !Cookies.get('_cwsd_cookie')) {
                Cookies.defaults.expires = 172800;
                Cookies.set('_cwsd_cookie', '<?php echo $cwsd_cookie; ?>');
            }

            function add_cwsd_evt(type, listener) {
                if (document.addEventListener) {
                    document.addEventListener(type, listener, false);
                } else if (document.attachEvent) {
                    document.attachEvent('on' + type, listener);
                } else {
                    document['on' + type] = listener;
                }
            }

            function count_cwsd_evt() {
                if (cwsd_cnt++ > 24 && cwsd_timer) {
                    setInterval(count_cwsd_evt, 1000);
                    clearInterval(cwsd_timer);
                    cwsd_timer = null;
                }

                if (!cwsd_frms.length) { //42,84,126,252..ms
                    if (cwsd_cnt < 3 || 0 === cwsd_cnt % 3) {
                        init_cwsd_frms();
                    }
                } else {
                    lock_cwsd_frms();
                }
            }

            function init_cwsd_evts() {
                for (var category in cwsd_evts) {
                    var events = cwsd_evts[category];
                    for (var i = 0; i < events.length; i++) {
                        add_cwsd_evt(events[i], count_cwsd_evt);
                    }
                }
            }

            function init_cwsd_frms() {
                for (var i = 0; i < document.forms.length; i++) {
                    var form = document.forms[i];
                    if (form.method && form.method.toLowerCase() === 'post') {
                        cwsd_frms.push(form);
                    }
                }
            }

            function lock_cwsd_frms() {
                for (var i = 0; i < cwsd_frms.length; i++) {
                    var form = cwsd_frms[i];
                    if (!form['_cwsd_input']) {
                        var input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = '_cwsd_input';
                        form.appendChild(input);
                    }
                    for (var n = 0; n < form.length; n++) {
                        if (form.elements[n].name === '_cwsd_input') {
                            form.elements[n].value = cwsd_input + '<?php echo $this->delimiter; ?>' + cwsd_cnt;
                        }
                    }
                }
            }

            init_cwsd_evts();
        </script>

        <?php
        return $data;
    }

    /**
     * Verifies the submitted POST data.
     *
     * @since   4.0.2
     * @access   public
     */
    public function wordpress_antibot_verify($data)
    {
        if (isset($_SERVER['REQUEST_METHOD']) && empty($_GET) && //has 3+ POST and no-GET params?
                $_SERVER['REQUEST_METHOD'] === 'POST' && count($_POST) >= 3) {
            $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');

            // Ensure that the cookie is exists and valid
            if (!($cwsd_cookie = $this->filter_input_cookie('_cwsd_cookie'))) {
                $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'Nocookie');
                $message = esc_html__('Please enable cookies on your browser, then try again.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            } elseif (!$cwis_defender_guarder->is_valid_cwsd_uid($cwsd_cookie, '', 7)) {
                setcookie('_cwsd_cookie', '', 1, '/'); //remove invalid cookie
                $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'Cookie');
                $message = esc_html__('The form has expired, please refresh and try again.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            }

            // Ensure that the token has not expired
            $cwsd_check = $this->filter_input_post('_cwsd_check');
            if (!$cwsd_check || !$cwis_defender_guarder->is_valid_cwsd_uid($cwsd_check)) {
                $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'Expiry');
                $message = esc_html__('The form has expired, please refresh and try again.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            }

            // Check the value of the dynamic protection field
            $_cwsd_input = $this->filter_input_post('_cwsd_input');
            list($cwsd_input, $cwsd_cnt) = array_pad(explode($this->delimiter, $_cwsd_input), 2, null);
            if (!$_cwsd_input || !$cwsd_input) {
                $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'Noscript');
                $message = esc_html__('For optimal use of this website please enable Javascript on your browser.',
                                      CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            } elseif (!$cwis_defender_guarder->is_valid_cwsd_uid($cwsd_input, $this->bfa_nonce, 7)) { //7-char long ID
                $cwis_defender_guarder->log_antibot_activity($cwsd_cookie, 'Cache');
                $message = esc_html__('Please clear your browser cache, refresh, and try again.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            } elseif (!$cwsd_cnt) {
                // Mark the user as blocked by Defender AntiBot
                $cwis_defender_guarder->block_user_ip_once('AntiBot');
            }
        }

        return $data;
    }

    /**
     * Cleanups the HTML output of the blog (for example, removes unrequired
     * meta tags from the document header and RSS feeds).
     * 
     * @since   1.0.5
     * @access  public
     */
    public function wordpress_security_hardening()
    {
        // Remove the generator tag.
        remove_action('wp_head', 'wp_generator');

        // Remove the frontend admin bar while in development
        //add_filter('show_admin_bar', '__return_false');
        //
        // Remove shortlinks from head.
        remove_action('wp_head', 'wp_shortlink_wp_head', 10, 0);

        // Remove manifest link.
        // http://wpsmackdown.com/wordpress-cleanup-wp-head/
        remove_action('wp_head', 'wlwmanifest_link');
        remove_action('wp_head', 'rsd_link');
        remove_action('wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0);

        // Disable XMLRPC by hijacking and blocking the option.
        add_filter('pre_option_enable_xmlrpc', '__return_false');

        // Remove RSS-feed links.
        remove_action('wp_head', 'feed_links_extra', 3);
        remove_action('wp_head', 'feed_links', 2);

        // Remove emoji frontend files added in 4.2
        remove_action('wp_head', 'print_emoji_detection_script', 7);
        remove_action('wp_print_styles', 'print_emoji_styles');
        // Remove s.w.org prefetch link
        add_filter('emoji_svg_url', '__return_false');

        /*
          // Disable the JSON API and remove the head link.
          add_filter('rest_enabled', '__return_false');
          add_filter('rest_jsonp_enabled', '__return_false');
          remove_action('wp_head', 'rest_output_link_wp_head', 10);

          // oEmbed stuff
          // Remove the REST API endpoint.
          remove_action('rest_api_init', 'wp_oembed_register_route');
          // Turn off oEmbed auto discovery.
          // Don't filter oEmbed results.
          remove_filter('oembed_dataparse', 'wp_filter_oembed_result', 10);
          // Remove oEmbed discovery links.
          remove_action('wp_head', 'wp_oembed_add_discovery_links');
          // Remove oEmbed-specific JavaScript from the front-end and back-end.
          remove_action('wp_head', 'wp_oembed_add_host_js');
         */

        // Remove 3rd-party tags.
        add_filter('revslider_meta_generator', '__return_false');
        remove_action('wp_head', 'woo_version');
        if (function_exists('visual_composer')) {
            remove_action('wp_head', array(visual_composer(), 'addMetaData'));
        }

        // Remove the generator name from the RSS feeds.
        add_filter('the_generator', '__return_false');
    }

    /*
      // And this snippet completely disable the REST API and shows {"code":"rest_disabled","message":"The REST API is disabled on this site."} when visiting http://yoursite.com/wp-json/
      // https://gist.github.com/ricomadiko/25e10a9f35f2f4cdf13550a97d8911ad
      function disable_json_api () {

      // Filters for WP-API version 1.x
      add_filter('json_enabled', '__return_false');
      add_filter('json_jsonp_enabled', '__return_false');

      // Filters for WP-API version 2.x
      add_filter('rest_enabled', '__return_false');
      add_filter('rest_jsonp_enabled', '__return_false');

      }
      add_action( 'after_setup_theme', 'disable_json_api' );
     */
}
