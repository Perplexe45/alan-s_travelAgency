<?php

/**
 * The file that defines the bufferer class.
 *
 * @link       https://cobweb-security.com
 * @since      1.0.1
 *
 * @package    Cwsd
 * @subpackage Cwsd/includes/defender
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Defender_Bufferer
{

    // Classes instances
    private $cwis_defender_converter, $cwis_defender_guarder;

    /**
     * Initializes class.
     *
     * @since   1.0.1
     * @access  public
     */
    public function __construct()
    {
        // Require and init the converter class
        require_once dirname(__FILE__) . '/class-converter.php';
        $this->cwis_defender_converter = new Cwis_Defender_Converter();

        // Require and init the guarder class
        require_once dirname(__FILE__) . '/class-guarder.php';
        $this->cwis_defender_guarder = new Cwis_Defender_Guarder();
    }

    /**
     * The default output buffering callback. Replaces the URLs using the 
     * replacement list, optimizes and compresses buffer content.
     *
     * @since   1.0.1
     * @access  public
     * 
     * @param   string $buffer
     * @return  string
     */
    public function ob_start_callback($buffer = '')
    {
        // Check headers for content-encoding
        $response_headers = $this->cwis_defender_converter->apache_response_headers();
        if (isset($response_headers['Content-Encoding']) && $response_headers['Content-Encoding'] === 'gzip') {
            // Decodes the gzip compressed buffer
            $decoded = gzdecode($buffer);
            if (!$decoded) {
                return $buffer;
            }

            $buffer = $decoded;
        }

        // Check for redirect header and update if need
        if (isset($response_headers['Location'])) {
            $header_value = $response_headers['Location'];
            $new_header_value = $this->cwis_defender_converter->replace_html_content_urls($header_value);

            if ($header_value !== $new_header_value) {
                header_remove("Location");
                header('Location: ' . $new_header_value);
            }
        }

        // Require and init the settings class
        require_once dirname(__FILE__) . '/class-settings.php';
        $cwis_defender_settings = new Cwis_Defender_Settings();
        if ($cwis_defender_settings->get('hidefunc')) {

            // Remove WordPress pingback
            $buffer = $this->remove_pingback($buffer);

            // Replace the URLs using the replacement list
            $buffer = $this->cwis_defender_converter->replace_html_content_urls($buffer);
        }

        // Insert the Defender protection field
        if ($cwis_defender_settings->get('antispam')) {
            $cwsd_check = $this->cwis_defender_guarder->create_cwsd_uid();
            $buffer = str_ireplace('</form>',
                                   '<input type=hidden name=_cwsd_check value=' . $cwsd_check . '>'
                    . '<input type=hidden name=_cwsd_input value=_></form>', $buffer);
        }

        // Remove any HTML comments and multiple empty lines
        if ($cwis_defender_settings->get('hidefunc')) {
            $buffer = $this->cwis_defender_converter->remove_html_comments($buffer);
            $buffer = $this->cwis_defender_converter->remove_empty_lines($buffer);
        }

        // Compress the buffer
        if (isset($response_headers['Content-Encoding']) && $response_headers['Content-Encoding'] == "gzip") {
            $buffer = gzencode($buffer);
        }

        return $buffer;
    }

    /**
     * Drops X-Pingback header and removes pingback tags from the HTML.
     * 
     * @since   1.6.0
     * @access  private
     * 
     * @param   string $buffer
     * @return  string
     */
    private function remove_pingback($buffer = '')
    {
        header_remove('X-Pingback');
        return preg_replace('/<link[^>]+?rel=[\"\']pingback[\"\'][^>]*?>/i', '', $buffer);
    }

}
