<?php

/**
 * The rest-related functionality of the plugin.
 * 
 * Defines the plugin name, version, and methods.
 *
 * @link       https://cobweb-security.com
 * @since      4.1.8
 *
 * @package    Cwis
 * @subpackage Cwis/includes/application
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Application_Rest extends Cwis_Core_Foundation
{

    private $rest_nonce;

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);

        // Validate REST NONCE option
        if (!($this->rest_nonce = get_option('CWIS_REST_NONCE')) || strlen($this->rest_nonce) !== 20) {
            $this->rest_nonce = strtoupper(base64_encode(rand(1000000000, 9999999999) . substr(microtime(), 1, 5)));
            update_option('CWIS_REST_NONCE', $this->rest_nonce);
        }
    }

    /**
     * Authentication controller.
     *
     * @since   4.1.8
     * @access  public
     * 
     * @return  string|void
     */
    public function authenticate()
    {
        if ($this->filter_input_post('action') === 'cwis_scanner' &&
                ($cwis_rest = $this->filter_input_post('cwis_rest'))) {

            // Decrypt received data
            $data = $this->decrypt($cwis_rest, $this->rest_nonce);
            if (null === ($result = json_decode($data, true))) {
                $message = esc_html__('Input data must be a valid JSON string.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            }

            // Time-limited authentication (2 sec is average connection time)
            if (!isset($result['gmtime']) || !isset($result['timeout']) ||
                    (abs(time() - $result['gmtime'] - 2) > $result['timeout'])) {
                $message = esc_html__('Authentication fails due to time skew.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            }

            // Request field validation
            foreach ($result['fields'] as $param => $value) {
                if ($this->filter_input_post($param) != $value) {
                    $message = esc_html__('Request field validation failed.', CWIS_PLUGIN_SLUG);
                    $this->debug($message);
                    wp_die($message, 400);
                }
            }

            // Check a user's login information and log them in
            $user = wp_authenticate($result['username'], $result['password']);
            if (is_wp_error($user)) {
                remove_action('wp_login_failed', $result['username']);
                $message = esc_html__('Invalid username and/or password.', CWIS_PLUGIN_SLUG);
                $this->debug($message);
                wp_die($message, 400);
            }

            // Process the requested tasks
            if (($cwis_rest_task = $this->filter_input_post('cwis_rest_task'))) {
                switch ($cwis_rest_task) {
                    case 'defender':
                        $cwis_defender_settings = $this->get_class_instance('Cwis_Defender_Settings');
                        $defender = $cwis_defender_settings->all();
                        die($this->encrypt(json_encode($defender), $this->rest_nonce));
                        break;

                    case 'scanner':
                        $cwis_ajax_class = $this->get_class_instance('Cwis_Scanner_Ajax');
                        $cwis_ajax_class->cwis_scanner_ajax_callback();
                        break;

                    case 'settings':
                        $settings = array(
                            'ajax_id'     => get_option('CWIS_AJAX_ID'),
                            'ajax_pass'   => get_option('CWIS_AJAX_PASS'),
                            'client_type' => 'wordpress',
                            'version'     => $this->get_version()
                        );
                        die($this->encrypt(json_encode($settings), $this->rest_nonce));
                        break;
                }
            }
        }
    }

    /**
     * Decrypts AES256, it is fully compatible with the GibberishAES library,
     * all this thanks to the openssl-decrypt/openssl-encrypt functions.
     *
     * @since   4.1.8
     * @access  private
     * 
     * @param   data $edata
     * @param   string $password
     * @return  string
     */
    private function decrypt($edata, $password)
    {
        if (!function_exists('openssl_decrypt')) {
            $message = esc_html__('You must enable the OpenSSL extension to load information.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        $data = base64_decode($edata);
        $salt = substr($data, 8, 8);
        $ct = substr($data, 16);
        /**
         * From https://github.com/mdp/gibberish-aes
         *
         * Number of rounds depends on the size of the AES in use
         * 3 rounds for 256
         *        2 rounds for the key, 1 for the IV
         * 2 rounds for 128
         *        1 round for the key, 1 round for the IV
         * 3 rounds for 192 since it's not evenly divided by 128 bits
         */
        $rounds = 3;
        $data00 = $password . $salt;
        $md5_hash = array();
        $md5_hash[0] = md5($data00, true);
        $result = $md5_hash[0];
        for ($i = 1; $i < $rounds; $i++) {
            $md5_hash[$i] = md5($md5_hash[$i - 1] . $data00, true);
            $result .= $md5_hash[$i];
        }
        $key = substr($result, 0, 32);
        $iv = substr($result, 32, 16);

        return openssl_decrypt($ct, 'aes-256-cbc', $key, true, $iv);
    }

    /**
     * Encrypts AES256, it is fully compatible with the GibberishAES library,
     * all this thanks to the openssl-decrypt/openssl-encrypt functions.
     *
     * @since   4.1.8
     * @access  private
     * 
     * @param   data $data
     * @param   string $password
     * @return  string
     */
    private function encrypt($data, $password)
    {
        if (!function_exists('openssl_random_pseudo_bytes') || !function_exists('openssl_encrypt')) {
            $message = esc_html__('You must enable the OpenSSL extension to load information.', CWIS_PLUGIN_SLUG);
            $this->debug($message);
            wp_die($message);
        }

        // Set a random salt
        $salt = openssl_random_pseudo_bytes(8);

        $salted = '';
        $dx = '';
        // Salt the key(32) and iv(16) = 48
        while (strlen($salted) < 48) {
            $dx = md5($dx . $password . $salt, true);
            $salted .= $dx;
        }

        $key = substr($salted, 0, 32);
        $iv = substr($salted, 32, 16);

        $encrypted_data = openssl_encrypt($data, 'aes-256-cbc', $key, true, $iv);
        return base64_encode('Salted__' . $salt . $encrypted_data);
    }

}
