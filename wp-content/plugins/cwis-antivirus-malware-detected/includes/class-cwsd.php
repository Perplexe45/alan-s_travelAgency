<?php

/**
 * The file that defines the core plugin class.
 *
 * A class definition that includes attributes and functions used across both the
 * public-facing side of the site and the admin area.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @link       https://cobweb-security.com
 * @since      1.0.0
 *
 * @package    Cwsd
 * @subpackage Cwsd/includes
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwsd extends Cwis_Core_Foundation
{

    /**
     * Define the core functionality of the plugin.
     *
     * Set the plugin name and the plugin version that can be used throughout the plugin.
     * Load the dependencies, define the locale, and set the hooks for the admin area and
     * the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);

        $this->define_plugin_hooks();
    }

    /**
     * Register all of the hooks related to the plugin functionality.
     *
     * @since   1.0.0
     * @access  private
     */
    private function define_plugin_hooks()
    {
        // Check if the Smart Protection is enabled.
        $cwis_defender_settings = $this->get_class_instance('Cwis_Defender_Settings');
        if (!$cwis_defender_settings->get('smartwaf')) {
            return;
        }

        // Backend or frontend?
        if (is_admin()) {
            $cwis_defender_admin = $this->get_class_instance('Cwis_Defender_Admin');

            // Reinstall guarder protection on any plugin activation (2 arguments expected).
            $this->loader->add_action('activated_plugin', $cwis_defender_admin, 'reinstall_guarder_protection', 10, 2);
        }
        // Check if not in backend of WordPress, not doing AJAX or CRON-JOB requests, 
        // and not one of the APP (Atom Publishing Protocol), REST or XML-RPC requests.
        elseif (!defined('WP_ADMIN') && !defined('DOING_AJAX') && !defined('DOING_CRON') &&
                !defined('APP_REQUEST') && !defined('REST_REQUEST') && !defined('XMLRPC_REQUEST')) {

            // Run the defender if it has been enabled and installed correctly
            if (is_file(ABSPATH . 'cwsd.php')) {
                $this->define_defender_hooks();
            } else {
                $cwis_defender_settings->update(array('smartwaf' => false));
            }
        }
    }

    /**
     * Register all of the hooks related to the DEFENDER functionality
     * of the plugin.
     *
     * @since   4.0.2
     * @access   private
     */
    private function define_defender_hooks()
    {
        $cwis_defender_admin = $this->get_class_instance('Cwis_Defender_Admin');
        $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');
        $cwis_defender_settings = $this->get_class_instance('Cwis_Defender_Settings');

        // Cleanup the HTML output of the blog
        $this->loader->add_action('init', $cwis_defender_admin, 'wordpress_security_hardening');

        // Whether the client IP included in the whitelist?
        if (!$cwis_defender_guarder->is_client_whitelisted()) {

            // --- BLACKLIST ---
            // Check whether the user's IP is blacklisted
            if ($cwis_defender_guarder->is_client_blacklisted()) {
                $cwis_defender_guarder->block_user_access('Blacklisted');
            }

            // --- ANTIBOT ---
            if ($cwis_defender_settings->get('antibot')) {

                // Block unwanted traffic by UA
                $cwis_defender_guarder->check_user_agent();

                // Check for user IP in database
                if (false !== $cwis_defender_guarder->check_user_ip()) {
                    $cwis_defender_guarder->block_user_access('AntiBot');
                }
            }

            // --- ANTISPAM ---
            if ($cwis_defender_settings->get('antispam')) {

                // Add hook for front-end <head></head>
                $this->loader->add_action('login_enqueue_scripts', $cwis_defender_admin, 'wordpress_antibot_protection');
                $this->loader->add_action('login_errors', $cwis_defender_admin, 'wordpress_antibot_protection');
                $this->loader->add_action('wp_head', $cwis_defender_admin, 'wordpress_antibot_protection');

                // Verifies POST request
                $this->loader->add_filter('init', $cwis_defender_admin, 'wordpress_antibot_verify');
            }

            // --- BFA PROTECTION ---
            if ($cwis_defender_settings->get('bruteforce')) {

                // This hook fires after a user login has failed
                $this->loader->add_action('wp_login_failed', $cwis_defender_admin, 'wordpress_antibot_login_failed');

                // Displays message on the WordPress Log In page above the form
                $this->loader->add_filter('login_message', $cwis_defender_admin, 'wordpress_antibot_login_message');
            }

            // --- ANTICOPIER ---
            if ($cwis_defender_settings->get('antibot')) {
                $URI = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : null;

                // Init the config, check if not replacement path or whitelisted client
                $cwis_defender_config = $this->get_class_instance('Cwis_Defender_Config');
                if (!$cwis_defender_config->is_url_replacement_path($URI) &&
                        !$cwis_defender_guarder->is_search_engine_bot()) {

                    // Track the page view
                    $page_path_tokenized = strtok($URI, '?');
                    $cwis_defender_guarder->track_pageview($page_path_tokenized);

                    // Block user on suspicious activity
                    $activity = $cwis_defender_guarder->check_pageviews_activity();
                    if ($activity[15]['factor'] > 3 && $activity[15]['entries'] > 6 &&
                            $activity[15]['factor'] * 6 > $activity[15]['entries']) {
                        $cwis_defender_guarder->block_user_access('Copier'); //block for 15 min
                    } elseif ($activity[60]['factor'] > 3 && $activity[15]['entries'] > 6 &&
                            $activity[60]['factor'] * 6 > $activity[60]['total']) {
                        $cwis_defender_guarder->block_user_ip('Copier'); //hard block for 1 day
                    }
                }
            }

            // --- BUFFERING ---
            // Enable output buffering
            $cwis_defender_admin->output_buffering_control();
        }
    }

}
