<?php

/**
 * The file that defines the core plugin class
 *
 * A class definition that includes attributes and functions used across both the
 * public-facing side of the site and the admin area.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @link       https://cobweb-security.com
 * @since      1.0.0
 *
 * @package    Cwis
 * @subpackage Cwis/includes
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis extends Cwis_Core_Foundation
{

    /**
     * Define the core functionality of the plugin.
     *
     * Set the plugin name and the plugin version that can be used throughout the plugin.
     * Load the dependencies, define the locale, and set the hooks for the admin area and
     * the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);

        // Check if not AJAX, CRON, APP (Atom Publishing Protocol) or XMLRPC
        if (!defined('DOING_AJAX') && !defined('DOING_CRON') && !defined('APP_REQUEST') && !defined('XMLRPC_REQUEST')) {
            $this->define_plugin_hooks();
        }

        // This enables the REST functionality
        $cwis_application_rest = $this->get_class_instance('Cwis_Application_Rest');
        if (defined('DOING_AJAX')) {
            $this->loader->add_filter('init', $cwis_application_rest, 'authenticate');
        }

        $this->define_ajax_hooks();
        $this->define_cron_hooks();
        $this->define_gdpr_hooks();
        $this->define_updater_hooks();
    }

    /**
     * Register all of the hooks related to the main plugin functionality.
     *
     * @since    1.0.0
     * @access   private
     */
    private function define_plugin_hooks()
    {
        if (is_admin()) {
            // This defines all plugin actions that occur in the admin area.
            $cwis_application_admin = $this->get_class_instance('Cwis_Application_Admin');

            // This adds the widget to the WordPress administration dashboard.
            $cwis_application_widget = $this->get_class_instance('Cwis_Application_Widget');

            // This defines all actions related to CWIS GDPR functionality.
            $cwis_gdpr_admin = $this->get_class_instance('Cwis_GDPR_Admin');

            // This defines all actions related to CWIS Updater functionality.
            $cwis_updater_admin = $this->get_class_instance('Cwis_Updater_Admin');

            // --- MENUS ---
            // Register the "enqueue_admin_bar_menu" function using the admin_bar_menu action hook.
            $this->loader->add_action('admin_bar_menu', $cwis_application_admin, 'enqueue_admin_bar_menu', 70);

            // Register the scanner menu-building functions using the admin_menu action hook.
            $this->loader->add_action('admin_menu', $cwis_application_admin, 'enqueue_admin_area_menu');
            $this->loader->add_action('admin_menu', $cwis_gdpr_admin, 'enqueue_gdpr_settings_menu');
            $this->loader->add_action('admin_menu', $cwis_updater_admin, 'enqueue_updater_settings_menu');

            // --- NOTICES ---
            // Register the "enqueue_admin_area_notices" function using the admin_notices action hook.
            $this->loader->add_action((is_multisite() ? 'network_' : '') . 'admin_notices', $cwis_application_admin,
                                      'enqueue_admin_area_notices');

            // --- CSS & JS ---
            // Register scripts and styles to include using the admin_enqueue_scripts action hook.
            $this->loader->add_action('admin_enqueue_scripts', $cwis_application_admin, 'enqueue_styles');
            $this->loader->add_action('admin_enqueue_scripts', $cwis_application_admin, 'enqueue_scripts');

            // --- OPTIONS ---
            // Register the "update_scanner_options" function using the admin_enqueue_scripts action hook.
            $this->loader->add_action('admin_enqueue_scripts', $cwis_application_admin, 'update_scanner_options');

            // --- WIDGET ---
            // Register the Wordpress dashboard widget to setup using the wp_dashboard_setup hook.
            $this->loader->add_action('wp_' . (is_multisite() ? 'network_' : '') . 'dashboard_setup',
                                      $cwis_application_widget, 'add_widget');
        }
    }

    /**
     * Register all of the hooks related to the AJAX CALLS functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access  private
     */
    private function define_ajax_hooks()
    {
        // The class responsible for defining all actions related to ajax calls.
        $cwis_ajax_class = $this->get_class_instance('Cwis_Scanner_Ajax');

        // Register a PHP function to handle the AJAX requests (with action="cwis_scanner").
        $this->loader->add_action('wp_ajax_cwis_scanner', $cwis_ajax_class, 'cwis_scanner_ajax_callback');
    }

    /**
     * Register all of the hooks related to the CRON JOB functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access   private
     */
    private function define_cron_hooks()
    {
        // The class responsible for defining all actions related to cron jobs.
        $cwis_cron_class = $this->get_class_instance('Cwis_Scanner_Cron');

        // Creating custom cron jobs schedule interval of 60 seconds.
        $this->loader->add_action('cron_schedules', $cwis_cron_class, 'cwis_scanner_cron_schedule');

        // Register a PHP function to handle the AJAX requests (with action="cwis_scanner").
        $this->loader->add_action('cwis_scheduled_events', $cwis_cron_class, 'cwis_scanner_cron_callback');
    }

    /**
     * Register all of the hooks related to the CWIS GDPR functionality.
     *
     * @since    4.1.9
     * @access   private
     */
    private function define_gdpr_hooks()
    {
        $cwis_gdpr_admin = $this->get_class_instance('Cwis_GDPR_Admin');
        $cwis_gdpr_admin->define_admin_hooks();

        $cwis_gdpr_public = $this->get_class_instance('Cwis_GDPR_Public');
        $cwis_gdpr_public->define_public_hooks();
    }

    /**
     * Register all of the hooks related to the UPDATER functionality
     * of the plugin.
     *
     * @since   3.3.3
     * @access   private
     */
    private function define_updater_hooks()
    {
        // This defines all methods related to CWIS Updater functionality.
        $cwis_updater_methods = $this->get_class_instance('Cwis_Updater_Methods');

        // Enable all background updates of WordPress
        add_filter('automatic_updater_disabled', '__return_false');

        // Enable Wordpress core automatic updates via filter (no arguments expected).
        $this->loader->add_action('init', $cwis_updater_methods, 'override_auto_core_updates');

        // Enable plugin automatic background updates via filter (2 arguments expected).
        $this->loader->add_filter('auto_update_plugin', $cwis_updater_methods, 'override_auto_plugin_updates', 10, 2);

        // Enable theme automatic background updates via filter (2 arguments expected).
        $this->loader->add_filter('auto_update_theme', $cwis_updater_methods, 'override_auto_theme_updates', 10, 2);

        // Overrides the WordPress.org API plugins update check (2 arguments expected).
        $this->loader->add_filter('http_request_args', $cwis_updater_methods, 'override_api_update_check', 10, 2);
    }

}
