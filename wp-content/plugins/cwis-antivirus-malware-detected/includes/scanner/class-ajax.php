<?php

/**
 * The ajax-specific functionality of the scanner.
 *
 * @link       https://cobweb-security.com
 * @since      3.3.3
 *
 * @package    Cwis
 * @subpackage Cwis/includes/scanner
 * @author     Cobweb Security <cwis@cobweb-security.com>
 */
class Cwis_Scanner_Ajax extends Cwis_Core_Foundation
{

    public function __construct($plugin_name, $version, $loader = null)
    {
        parent::__construct($plugin_name, $version, $loader);
    }

    /**
     * Creates the AJAX callback function.
     *
     * @since    2.0.3.1
     */
    public function cwis_scanner_ajax_callback()
    {

        // Scanner ID for authentication in AJAX interface.
        define('CWIS_AJAX_ID', get_option('CWIS_AJAX_ID'));

        // Password to scan report (and file editing in PRO version).
        define('CWIS_AJAX_PASS', get_option('CWIS_AJAX_PASS'));

        // Intercept direct requests
        if (!$this->is_ajax_request_intercepted()) {

            // Scanner core signature
            define('CWIS_SIGNATURE', 'ezscan7objrldgpfvmqkdthyuwi4x2x5');

            // Absolute path to the root directory
            define('CWIS_ROOT_PATH', dirname(dirname(dirname(__FILE__))));

            // Absolute path to the working directory
            define('CWIS_WORK_PATH', CWIS_ROOT_PATH . DIRECTORY_SEPARATOR . 'cwis-scan');

            // Get upload path
            $upload_dir = wp_upload_dir();
            $upload_path = $upload_dir['basedir'] . '/cwis';

            // Absolute path to the temporary files directory
            define('CWIS_TEMP_PATH', $upload_path);

            // Path to the starting point for the scan
            define('CWIS_SCAN_PATH', substr(ABSPATH, 0, -1));

            // Include scanner "bootstrap" file
            require_once CWIS_WORK_PATH . DIRECTORY_SEPARATOR . 'cwis-bootstrap.php';
        }

        wp_die(); // exit with a proper response
    }

    // --- PRIVATE ---

    /**
     * Recognizes and intercepts direct requests to the Wordpress Website.
     * 
     * @return bool
     */
    private function is_ajax_request_intercepted()
    {
        // Check the passed password
        if (CWIS_AJAX_PASS === $this->filter_input_post('p')) {

            // Selected option (module) and task (action)
            $option = $this->filter_input_post('cwis_option');
            $task = $this->filter_input_post('cwis_task');

            // Defender module requested
            if ($option === 'defender') {
                switch ($task) {
                    // Toggle WAF On/Off
                    case 'enable':
                    case 'disable':
                        $defender_enabled = (bool) ($task === 'enable');
                        $cwis_defender_settings = $this->get_class_instance('Cwis_Defender_Settings');
                        $cwis_defender_settings->update(array('smartwaf' => $defender_enabled));
                        if ($defender_enabled) {
                            activate_cwsd();
                        } else {
                            uninstall_cwsd();
                        }

                        echo $defender_enabled ? 1 : 0;
                        return true;

                    // Defender logs
                    case 'logs':
                        $cwis_defender_filesystem = $this->get_class_instance('Cwis_Defender_Filesystem');
                        $temp_dir_path = $cwis_defender_filesystem->create_temp_files_directory(CWIS_PLUGIN_DIR_PATH);
                        $log_filename = $temp_dir_path . '/cwsd-guarder.log';
                        $log_lines = $this->filter_input_post('cwis_log_lines');

                        $file_contents = '';
                        if (is_readable($log_filename)) {
                            $file = is_file($log_filename) ? file($log_filename) : array();
                            $file_size = count($file);
                            $file_start = ($log_lines >= 0) ? max(0, $file_size - $log_lines) : 0;
                            for ($i = $file_start; $i < $file_size; $i++) {
                                $file_contents .= trim($file[$i]) . "\n";
                            }
                        }

                        // Set charset to UTF-8
                        header('Content-type: text/html; charset=utf-8');

                        // Output file contents encoded (prevent zero-length by adding a space)
                        echo htmlentities($file_contents . ' ', ENT_NOQUOTES | ENT_IGNORE, "UTF-8");
                        return true;

                    // Get/update WAF settings
                    case 'settings':
                        $cwis_defender_settings = $this->get_class_instance('Cwis_Defender_Settings');
                        $cwsd_options_prev = $cwis_defender_settings->all();
                        if (!($task_config = urldecode($this->filter_input_post('cwis_task_config')))) {
                            echo json_encode($cwsd_options_prev);
                            return true;
                        }

                        // Update database settings
                        $cwsd_options = $cwis_defender_settings->update(json_decode($task_config));
                        if ($cwsd_options_prev['smartwaf'] !== $cwsd_options['smartwaf']) {
                            if ($cwsd_options['smartwaf']) {
                                activate_cwsd();
                            } else {
                                uninstall_cwsd();
                            }
                        }
                        echo $task_config;
                        return true;

                    // Output WAF stats
                    case 'stats':
                        $cwis_defender_guarder = $this->get_class_instance('Cwis_Defender_Guarder');
                        echo json_encode($cwis_defender_guarder->get_defender_pageview_stats());
                        return true;

                    // Output Updater data
                    case 'updater':
                        $cwis_updater_methods = $this->get_class_instance('Cwis_Updater_Methods');
                        echo json_encode($cwis_updater_methods->get_cached_updater_data());
                        return true;
                }
            }
        }

        return false;
    }

}
